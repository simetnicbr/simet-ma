#!/bin/sh
# SIMET-MA os-specific compatibility layer (shell script) - SIMETBOX
# Copyright (c) 2018,2019 NIC.br <medicoes@simet.nic.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  In every case, additional
# restrictions and permissions apply, refer to the COPYING file in the
# program Source for details.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License and the COPYING file in the program Source
# for details.
#
# depends:
# OpenWRT + openwrt-simetbox-*, tr, uname, sed

# preseed some variables
# shellcheck disable=SC2034
SIMET2_AGENT_FAMILY="embedded"

# logs to stderr and syslog, deals with eventual "logger" oddities
# $1 - simet subsystem (simet-lmapd, simet-ma)
# $2 - syslog facility.level (daemon.info, etc)
# $3... message
simet_log() {
	P1="$1"
	P2="$2"
	shift 2
	logger -s -t "$P1" -p "$P2" -- "$@" || true
	:
}

# Loads SIMET-MA engine config for all users of this lib
. @SIMETLIBDIR@/simet_lib_config.sh
[ -z "$SIMET_CFG_LOAD_ERROR" ] || \
	simet_log simet-ma daemon.crit "SIMET-MA configuration has syntax errors, malfunction is likely"

SIMET_MAC_LABEL=$(get_mac_address.sh 2>/dev/null | tr A-F a-f | tr -d ': -') || SIMET_MAC_LABEL=

# stdout: HTTP-compatible agent name/version string
# Note: subshell function!
get_http_useragent()
(
	BOXVERSION=$(get_simet_box_version.sh 2>/dev/null) || BOXVERSION="unknown"
	[ -r "${AGENT_VERSION_FILE}" ] && AGENTVERSION=$(cat "${AGENT_VERSION_FILE}")
	[ -z "$AGENTVERSION" ] && AGENTVERSION="simet-ma/unknown"
	if [ -r /etc/openwrt_release ] ; then
		AGENTENV=$( \
			. /etc/openwrt_release
			echo "$DISTRIB_DESCRIPTION $DISTRIB_TARGET $DISTRIB_ARCH" | tr -s ' '
		) || true
	fi
	[ -z "$AGENTENV" ] && AGENTENV="unknown"
	AGENTENV="$AGENTENV; $(uname -srm)" || AGENTENV="$AGENTENV; unknown"
	echo "$AGENTVERSION (SIMETBOX/$BOXVERSION; $AGENTENV)" | tr -dc ' A-Za-z0-9(),.;:/+~^_-'
	:
)

# sets environment variables that match the environment
# shellcheck disable=SC2034
simet2_agentinfo() {
	SIMET2_AGENT_ENVNAME=$(. /etc/openwrt_release && printf '%s' "$DISTRIB_ID") || return 1
	SIMET2_AGENT_ENVVERSION=$(. /etc/openwrt_release && printf '%s %s' "$DISTRIB_DESCRIPTION" "$DISTRIB_REVISION") || return 1
	SIMET2_MAHOSTNAME=$(uci get system.@system[0].hostname 2>/dev/null) || SIMET2_MAHOSTNAME=
	SIMET2_MADESCRIPTION=$(uci get system.@system[0].description 2>/dev/null) || SIMET2_MADESCRIPTION=
	SIMET2_DEVICE_MODEL=$(get_model.sh 2>/dev/null | tr -s '_' ' ') || SIMET2_DEVICE_MODEL=
	[ "$SIMET2_DEVICE_MODEL" = "unknown" ] && SIMET2_DEVICE_MODEL=
	:
}

#
# JSON output helpers
#

# apply JSON quoting using sed, BRE/ERE friendly, note #@
# shellcheck disable=SC2120
simet_jo_sed() {
	sed -e 's#\\#\\\\#g' -e 's#"#\\"#g' "$@"
}
simet_jo() {
	printf '%s' "$*" | simet_jo_sed
}
# json-quote \"$*\" and return in stdout
simet_jo_quoted() {
	printf '"%s"' "$(printf '%s' "$*" | simet_jo_sed)"
}
# Output JSON string fields if non-empty
# $1 should be 0 or 1 to prepend a comma
# ($2,$3) ... should be pairs of (field, *string* content)
# WARNING: returns 1 if all fields were empty
simet_jo_pairs() {
	local vf1 cf1 jo
	vf1=
	cf1=1
	[ "$1" -eq 1 ] && vf1=", "
	shift
	while [ $# -ge 2 ] ; do
		[ -n "$1" ] && [ -n "$2" ] && {
			jo=$(simet_jo "$2")
			printf "$vf1\"%s\":\"%s\"" "$1" "$jo"
			vf1=", "
			cf1=0
		}
		shift 2
	done
	return $cf1
}
# Output an anonymous JSON object with non-empty string fields
# ($1, $2) ... should be pairs of (field, string content)
simet_jo_obj() {
	printf '{ '
	simet_jo_pairs 0 "$@" || :
	printf ' }'
}
# Output named JSON object of non-empty string fields, if non-empty
# $1 should be 0 or 1 to prepend a comma
# $2 is the object name
# ($3,$4) ... should be pairs of (field, *string* content)
# WARNING: returns 1 if nothing printed.
simet_jo_obj_named() {
	local cf1 vf1 jo objn
	vf1=
	cf1=1
	[ "$1" -eq 1 ] && { vf1=", " ; cf1=0 ; }
	objn="$2"
	shift 2
	jo=$(simet_jo_pairs 0 "$@") && \
		printf "%s\"%s\":{ %s }" "$vf1" "$objn" "$jo" && cf1=0
	return $cf1
}

# HOOK API
is_call_implemented() {
	command -V "$1" > /dev/null 2>&1
}
call() {
	cmd="$1"
	shift
	if is_call_implemented "${cmd}_override" ; then
		"${cmd}_override" "$@"
        else
		"${cmd}" "$@"
	fi
}
call_hook() {
	cmd="$1"
	shift
	if is_call_implemented "${cmd}" ; then
		"${cmd}" "$@"
	fi
}
simet_load_hooks() {
	{
		[ -r "@SIMETLIBDIR@/simet_$1-hooks.sh" ]  && . "@SIMETLIBDIR@/simet_$1-hooks.sh"
		[ -d @SIMETLIBDIR@/conf.d ] && {
			for i in @SIMETLIBDIR@/conf.d/*.common.hook @SIMETLIBDIR@/conf.d/*."$1".hook ; do
				[ -r "$i" ] && . "$i"
			done
		}
		[ -r "@SIMETCONFDIR@/simet_$1-hooks.sh" ] && . "@SIMETCONFDIR@/simet_$1-hooks.sh"
	} < /dev/null >&2
	:
}

# first will be main mac
simet_get_persistent_macs()
(
	printf '%s\n' "$SIMET_MAC_LABEL"
	N=$(for i in /sys/class/net/* ; do [ -r "$i/address" ] && readlink -f "$i" ; done | sed -e '/virtual/ d' -e '/sys/ s#$#/address#')
	for i in $N ; do
		printf '%s\n' "$(tr -dc '0-9a-fA-F' < "$i" 2>/dev/null | tr A-F a-f)"
	done | sed -e '/^0\+$/ d' -e '/^f\+$/ d' -e "/$SIMET_MAC_LABEL/ d" | sort -u
)
:
