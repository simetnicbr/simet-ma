#!/bin/bash
# SIMET2 MA - register and refresh agent registry information
# Copyright (c) 2018-2025 NIC.br <medicoes@simet.nic.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  In every case, additional
# restrictions and permissions apply, refer to the COPYING file in the
# program Source for details.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License and the COPYING file in the program Source
# for details.

# parameters:
#   --boot   (optional) shorten wait times and not restart the service
#            do nothing if already sucessfully run in the last 24H.
#
#   --daily  (optional): do nothing if already sucessfully run in
#            the last 24H.  Use it in *all* periodic calls that
#            are not in a per-device *randomized* once-every-24H
#            regime, otherwise many devices might contact the SIMET2
#            servers at the same time, which is a grave violation of
#            the SIMET2 terms of service.
#
# Pairing (association of the MA to a participant in the web portals)
# is disabled by having an empty virtual label (empty contents inside
# the file referenced by $AGENT_VLABEL_FILE)

set -e
set -o pipefail

. @SIMETLIBDIR@/simet_lib.sh || exit 3

umask 0002

SIMETMA_REGMA_LOCK="${SIMET_LOCK_DIR}/simet_register_ma.lock"

RC=1
OUTFILE=
SIMETMA_UPDATE_LASTEXEC=
reset_lastrun() {
	printf "0" > "$AGENT_TOKEN_LOCK" || :
}
update_lastrun() {
	# note: remember to remove or zero-out this file when updating the package
	[ -n "$SIMETMA_UPDATE_LASTEXEC" ] && {
		date +%s -u > "$AGENT_TOKEN_LOCK" || :
	}
	:
}
abend() {
	simet_log simet-ma daemon.err "error: $*"
	[ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
	update_lastrun || :
	exit "$RC"
}
clean_exit() {
	[ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
	update_lastrun || :
	exit 0
}
abend_ratelimit() {
	SIMETMA_UPDATE_LASTEXEC=1
	abend "$@"
}
run_trap() {
	# 128 + SIGTERM (15)
	RC=143 abend "$0: received stop/interrupt signal"
}

SIMETMA_RECONFIG=${SIMETMA_RECONFIG:-/etc/init.d/simet-ma reload}

# Load hooks and overrides
simet_load_hooks register_ma

USERAGENT=$(get_http_useragent)
CURLOPT="$CURL_APIOPT"
CURLOPT_XTRA="--max-filesize 4000"

SIMETMA_24HMODE=
case "$1" in
	--boot)
		shift
		CURLOPT="$CURL_APIOPT_FAST"
		SIMETMA_RECONFIG=
		SIMETMA_24HMODE=1
	;;
	--daily)
		shift
		SIMETMA_24HMODE=1
	;;
esac
CURLOPT="$CURL_APIBASE $CURLOPT $CURLOPT_XTRA"

# WARNING: we might be run from inside lmapd, which in turn
# could signal us with SIGTERM when we send it a configuration
# reload signal (or worse: restart it).
#
# Thus, queue calls to simet_restart_services() via an EXIT
# trap.  Do not call it inline.

#overridable
simet_restart_services() {
	if [ -n "$SIMETMA_RECONFIG" ] ; then
		$SIMETMA_RECONFIG || true
	fi
	:
}

__gethash() {
	# $1 - file to hash
	[ -r "$1" ] || {
		echo ""
		return 0
	}
	sha256sum "$1" | sed -n '1 { s/[[:blank:]].*// ; p }'
	return 0
}
#overridable
#clobbers $OUTFILE contents!
write_lmap_agent() {
	if [ -z "$1" ] ; then
		rm -f  "$LMAP_AGENT_FILE"
		simet_log simet-ma daemon.notice "SIMET: removed LMAP agent-id"
	else
		cat <<- LMAPAGENTEOF >"$OUTFILE" || return 1
			{"ietf-lmap-control:lmap":{"agent":{"agent-id":"$1","report-agent-id":true}}}
		LMAPAGENTEOF
		HASHOLD=$(__gethash "$LMAP_AGENT_FILE") || HASHOLD=
		HASHNEW=$(__gethash "$OUTFILE") || return 1
		[ x"$HASHOLD" != x"$HASHNEW" ] && {
			LMAP_AGENT_DIR=$(dirname "$LMAP_AGENT_FILE")
			#shellcheck disable=SC2174
			[ -d "$LMAP_AGENT_DIR" ] || mkdir -m 0770 -p "$LMAP_AGENT_DIR"
			cp -f "$OUTFILE" "$LMAP_AGENT_FILE" && { chmod 0660 "$LMAP_AGENT_FILE" 2>/dev/null || : ; }
		}
	fi
	:
}
#overridable
# $1: agent-id
# $2: VTK (assumed to be stored in tmpfs)
# if missing, remove the token
write_access_tokens() {
	if [ $# -lt 2 ] || [ -z "$1" ] || [ -z "$2" ] ; then
		rm -f "$AGENT_VTK_FILE" "$AGENT_VIEW_CREDENTIALS_FILE"
		simet_log simet-ma daemon.notice "SIMET: view_results access token removed"
	else
		printf "%s" "$2" > "$AGENT_VTK_FILE"
		VTK_CREDS_DIR=$(dirname "$AGENT_VIEW_CREDENTIALS_FILE")
		#shellcheck disable=SC2174
		[ -d "$AGENT_VIEW_CREDENTIALS_FILE" ] || mkdir -m 0775 -p "$VTK_CREDS_DIR"
		printf '%s %s\n' "$1" "$2" > "$AGENT_VIEW_CREDENTIALS_FILE"
		simet_log simet-ma daemon.info "SIMET: view_results access token updated"
	fi
	:
}
#overridable
#clobbers $OUTFILE contents (write_lmap_agent)
write_agent_creds() {
	if [ -z "$AID" ] ; then
		rm -f "$AGENT_ID_FILE"
	elif [ "$AID" != "$OLDAID" ] ; then
		printf '%s\n' "$AID" > "$AGENT_ID_FILE"
	fi
	if [ -z "$AT" ] ; then
		rm -f "$AGENT_TOKEN_FILE"
	elif [ "$AT"  != "$OLDAT"  ] ; then
		printf '%s\n' "$AT" > "$AGENT_TOKEN_FILE"
	fi
	call write_lmap_agent "$AID" || :
	:
}

#must not change pairing data cache
__simet_consume_api_output() {
	AT=
	AID=
	PAIRED=0
	SID=$($JSONFILTER -i "$OUTFILE" -e "AID=@.agent_id" -e "AT=@.agent_token" -e "PAIRED=@.has_pairing") \
		|| abend "unexpected or incorrect response from agent-registry service"
	eval "$SID" || abend "internal error"
	PAIREDTO=$($JSONFILTER -i "$OUTFILE" -e "@.participant_id") || PAIREDTO=
	: > "$OUTFILE"

	call write_agent_creds || \
		simet_log simet-ma daemon.err "failed to write credentials!"
	:
}

__simet_quoteornull() {
	if [ -z "$1" ] ; then
		printf "null"
	else
		simet_jo_quoted "$*"
	fi
	:
}
#override to add extra attributes
__simet_agent_extra_attributes() {
	return 1
}
__simet_agent_attributes() {
	local AMAC ADESC AHN AVEND
	simet2_agentinfo && {
		AVEND=$(simet_jo_pairs 0 \
			firmware_vendor "$SIMET2_FIRMWARE_VENDOR" \
			device_model "$SIMET2_DEVICE_MODEL" \
		  && printf ',')
		AMAC=$(__simet_quoteornull "$SIMET_MAC_LABEL")
		ADESC=$(__simet_quoteornull "$SIMET2_MADESCRIPTION")
		AHN=$(__simet_quoteornull "$SIMET2_MAHOSTNAME")
		AEXTRA=",$(call __simet_agent_extra_attributes)" || AEXTRA=
		printf "\"attributes\":{%s\"mac_address\":%s,\"description\":%s,\"hostname\":%s%s}," \
			"$AVEND" "$AMAC" "$ADESC" "$AHN" "$AEXTRA"
	}
	:
}
__simet_agent_environment() {
	simet2_agentinfo && \
		simet_jo_pairs 0 agent_environment_name "$SIMET2_AGENT_ENVNAME" agent_environment_version "$SIMET2_AGENT_ENVVERSION" && \
		printf ','
	:
}

__simet_create_agent_apicall() {
	curl $CURLOPT \
		-A "$USERAGENT" -H "Content-type: application/json" \
		-X POST -o "$OUTFILE" -w "%{http_code}" \
		--data-binary "{ $*
		  $(call __simet_agent_attributes)
		  $(call __simet_agent_environment)
		  $(simet_jo_pairs 0 \
			engine_name "@SIMET_ENGINE_NAME@" \
			engine_version "@PACKAGEVERSION@" \
			agent_family "$SIMET2_AGENT_FAMILY")
		}" "$API_SIMET_AGENT_REG/v2/agents" \
	  || return 1
	:
}
__simet_create_agent_common() {
	APIRES=$(__simet_create_agent_apicall "$@") || {
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "could not talk to SIMET2 Agent Register API"
		return 1
	}
	case "$APIRES" in
	201)
		SIMETMA_UPDATE_LASTEXEC=1
		return 0
		;;
	410)
		# DENY LISTED. FURTHER ACCESS EXPLICITLY UNAUTHORIZED. May retry in 24h
		__simet_remove_identity
		simet_log simet-ma daemon.crit "access to SIMET2 unauthorized"
		SIMETMA_UPDATE_LASTEXEC=1
		return 1
		;;
	429)
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "SIMET2 agent regitry service: too many requests from this client/network, try later"
		return 1
		;;
	5??|408)
		simet_log simet-ma daemon.err "SIMET2 register agent API: service temporarily unavailable, status $APIRES"
		return 1
		;;
	4??)
		simet_log simet-ma daemon.err "SIMET2 register agent API: client error, status $APIRES"
		SIMETMA_UPDATE_LASTEXEC=1
		return 1
		;;
	esac

	simet_log simet-ma daemon.err "SIMET2 register agent API: server returned unexpected status $APIRES"
	SIMETMA_UPDATE_LASTEXEC=1
	return 1
}

# avoid updating the metadata twice for no good reason
DIDMETADATAUPDATE=0

__simet_modify_agent_apicall() {
	curl $CURLOPT \
	     -A "$USERAGENT" \
	     -X PUT -H "Content-type: application/json" \
	     -H "Authorization: Bearer $AT" \
	     -o "$OUTFILE" -w "%{http_code}" \
	     --data-binary "{ $1
		  $(call __simet_agent_attributes)
		  $(call __simet_agent_environment)
		  $(simet_jo_pairs 0 \
			engine_name "@SIMET_ENGINE_NAME@" \
			engine_version "@PACKAGEVERSION@" \
			agent_family "$SIMET2_AGENT_FAMILY")
		}" "${API_SIMET_AGENT_REG}/v2/agents/$AID" \
	  || return 1
	:
}
__simet_modify_agent() {
	APIRES=$(__simet_modify_agent_apicall "$@") || {
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "could not talk to SIMET2 Agent Register API"
		return 1
	}
	case "$APIRES" in
	200)
		__simet_consume_api_output
		DIDMETADATAUPDATE=1
		return 0
		;;
	429)
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "SIMET2 agent registry service: too many requests from this client/network, try later"
		return 1
		;;
	204)
		simet_log simet-ma daemon.err "SIMET2 agent registry doesn't know our agent-id!"
		;;
	401|403)
		simet_log simet-ma daemon.err "SIMET2 agent autentication token invalid, or expired!"
		;;
	410)
		# It is not safe to invalidate credentials here (REALLY. DO NOT DO IT).
		# There are border conditions at play here, this is the current best
		# path forward: just error out.
		simet_log simet-ma daemon.err "SIMET2 agent registry reports our identity has been disabled (while updating agent metadata). Please retry later."
		;;
	400)
		# client software issue most likely. Must rate-limit.
		SIMETMA_UPDATE_LASTEXEC=1
		simet_log simet-ma daemon.err "SIMET2 server reports client error (while updating agent metadata)"
		return 1
		;;
	5??|408)
		# server errors and timeouts
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "SIMET2 agent registry service unavailable"
		return 1
		;;
	4??)
		simet_log simet-ma daemon.err "SIMET2 register agent API: client error, status $APIRES"
		SIMETMA_UPDATE_LASTEXEC=1
		return 1
		;;
	*)
		simet_log simet-ma daemon.err "SIMET2 Agent Register API request returned unexpected status $APIRES"
		;;
	esac

	SIMETMA_UPDATE_LASTEXEC=
	return 1
}
__simet_modify_agent_pairing() {
	# Note: if the vlabel subsystem failed, leave agent pairing state unchanged
	[ "$1" = "FAILED" ] && return 1

	SCSECRET="$1"
	[ "$SCSECRET" = "DISABLED" ] && SCSECRET=
	WFP="true"
	[ -z "$SCSECRET" ] || [ "$PAIRED" = "true" ] || [ "$PAIRED" = 1 ] && WFP="false"

	SC="\"waiting_for_pairing\":$WFP,"
	[ -n "$SCSECRET" ] && SC="$SC\"secret\":\"$SCSECRET\","

	__simet_modify_agent "$SC" || return $?
	:
}

#overridable
simet_register_vlabel() {
	__simet_modify_agent_pairing "$SIMET2_VLABEL" || return $?
	:
}
#overridable
simet_update_agent_metadata() {
	if [ "$DIDMETADATAUPDATE" != "1" ] ; then
		__simet_modify_agent "" || return $?
	fi
	:
}

# used only for *first* register, not for recovery
#overridable
simet_create_agent() {
	__simet_create_agent_common "" || return $?

	[ -n "$AGENT_PAIRBKP_FILE" ] && rm -f "$AGENT_PAIRBKP_FILE"
	[ -n "$AGENT_PAIR_FILE" ] && rm -f "$AGENT_PAIR_FILE"

	__simet_consume_api_output
}
# used only for recovery into an anonymous MA
#overridable
simet_create_agent_for_recovery() {
	simet_log simet-ma daemon.crit "self-healing required, registering as a new measurement agent"
	__simet_create_agent_common || return $?
	__simet_consume_api_output
	:
}

#overridable
simet_save_pairing_recovery() {
	[ -n "$AGENT_PAIRBKP_FILE" ] && {
		if [ ! -r "$AGENT_PAIRBKP_FILE" ] ; then
			[ -r "$AGENT_PAIR_FILE" ] && {
				mv -f "$AGENT_PAIR_FILE" "$AGENT_PAIRBKP_FILE"
				simet_log simet-ma daemon.notice "pairing recovery information saved"
			}
		else
			simet_log simet-ma daemon.err "warning: pairing recovery info already present, using it"
			rm -f "$AGENT_PAIR_FILE"
		fi
	}
	:
}

#overridable
# $1: reason A-Za-z0-9_, to name bkp files
backup_invalid_id() {
	simet_log simet-ma daemon.debug "backup agent-id and tokens, suffix $1.bak"
	[ -e "$AGENT_ID_FILE" ] && mv -f "$AGENT_ID_FILE" "$AGENT_ID_FILE.$1.bak"
	[ -e "$AGENT_TOKEN_FILE" ] && mv -f "$AGENT_TOKEN_FILE" "$AGENT_TOKEN_FILE.$1.bak"
}

# pairing not cleaned up here
__simet_remove_identity() {
	OLDAT=
	OLDAID=
	AT=
	AID=
	call write_agent_creds || rm -f "$AGENT_ID_FILE" "$AGENT_TOKEN_FILE"
	__invalidate_tokens
	[ -d "$SIMET_RUNSTATE_DIR" ] && rm -f "$SIMET_RUNSTATE_DIR/vlabel-was-foreign"
	:
}
# pairing not cleaned up here
# $1: reason a-z0-9_, to name bkp files
__simet_invalidate_all() {
	call backup_invalid_id "$1"
	simet_log simet-ma daemon.notice "removing agent-id and tokens"
	__simet_remove_identity || :
}

#overridable
simet_refresh_agent_status() {
	APIRES=$( curl $CURLOPT -A "$USERAGENT" \
		  -H "Authorization: Bearer $AT" \
		  -X GET -o "$OUTFILE" -w "%{http_code}" \
		  "${API_SIMET_AGENT_REG}/v2/agents/$AID" ) || {
		SIMETMA_UPDATE_LASTEXEC=
		return 1
	}
	case "$APIRES" in
	204)
		simet_log simet-ma daemon.err "SIMET2 agent registry doesn't know our agent-id!"
		;;
	401|403)
		simet_log simet-ma daemon.err "SIMET2 agent autentication token invalid, or expired!"
		;;
	410)
		# MUST rate-limit 410
		# A 410 status from this endpoint means the SIMET2 AR or the SIMET2 support
		# team needs to force an agent-id change.  There are many reasons for this
		# procedure, including remotely-initiated requests for measurement history
		# removal, or starting a new measurement timeline, etc.
		SIMETMA_UPDATE_LASTEXEC=1
		simet_log simet-ma daemon.warn "SIMET2 agent registry reports our agent-id has been revoked or disabled"

		# Any further access using a revoked agent-id is explicitly unauthorized,
		# so immediately erase it.  We will request a new agent-id later.
		__simet_invalidate_all agstat_410
		;;
	200)
		SIMETMA_UPDATE_LASTEXEC=1
		__simet_consume_api_output
		return 0
		;;
	304)
		# not clear what we should do here, really
		SIMETMA_UPDATE_LASTEXEC=1
		clean_exit
		;;
	429)
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "SIMET2 agent regitry service: too many requests from this client/network"
		return 1
		;;
	5??|408|404|405)
		# server errors and timeouts
		SIMETMA_UPDATE_LASTEXEC=
		abend "SIMET2 agent registry service temporarily unavailable, status $APIRES"
		;;
	4??)
		# client software issue most likely. Must rate-limit.
		# unlikely that recovery would help, it would just keep creating agents
		abend_ratelimit "SIMET2 server reports client error, status $APIRES"
		;;
	*)
		abend "SIMET2 agent registry: server returned unexpected status $APIRES"
		;;
        esac

	call simet_create_agent_for_recovery || abend "failed to create new identity for recovery"
	call simet_save_pairing_recovery
	SIMETMA_UPDATE_LASTEXEC=1
	return 0
}

__clean_participant_metadata_info() {
	: > "$AGENT_PARTICIPANT_INFO"
}

__consume_participant_api_output() {
	T=$($JSONFILTER -i "$OUTFILE" -t '@.attributes' 2>/dev/null) || return 1
	[ "$T" = "object" ] || return 1
	_ARC=0
	$JSONFILTER -i "$OUTFILE" -e '@.attributes' 2>/dev/null >"$AGENT_PARTICIPANT_INFO" || _ARC=$?
	: > "$OUTFILE"
	return $_ARC
}

#overridable
# overrides contents of OUTFILE!
simet_update_participant_info() {
	APIRES=$( curl $CURLOPT -A "$USERAGENT" \
		  -H "Authorization: Bearer $AT" \
		  -X GET -o "$OUTFILE" -w "%{http_code}" \
		  "${API_SIMET_AGENT_REG}/v2/agents/$AID/participant" ) || {
		SIMETMA_UPDATE_LASTEXEC=
		return 1
	}
	case "$APIRES" in
	204|410)
		# not associated to a participant (anymore?) or agent-id being replaced
		__clean_participant_metadata_info
		return 0
		;;
	200)
		__consume_participant_api_output || return 1
		return 0
		;;
	304)
		# just keep the status quo, whatever it is. Meh.
		return 0
		;;
	401|403)
		SIMETMA_UPDATE_LASTEXEC=1
		simet_log simet-ma daemon.err "server reports invalid or expired agent autentication token!"
		;;
	5??|408)
		# server errors and timeouts
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "SIMET2 agent registry service temporarily unavailable, status $APIRES"
		;;
	4??)
		# client software issue most likely. Must rate-limit.
		SIMETMA_UPDATE_LASTEXEC=1
		simet_log simet-ma daemon.err "SIMET2 server reports client error, status $APIRES"
		;;
        esac
	return 1
}

#overridable
simet_log_participant_info() {
	[ -s "$AGENT_PARTICIPANT_INFO" ] || return 0

	local PSNAME PNAME
	PSNAME=$($JSONFILTER -i "$AGENT_PARTICIPANT_INFO" -e '@.short_name' 2>/dev/null) || PSNAME=
	PNAME=$($JSONFILTER -i "$AGENT_PARTICIPANT_INFO" -e '@.name' 2>/dev/null) || PNAME=
	[ -z "$PNAME$PSNAME" ] && return 0
	if [ -n "$PNAME" ] && [ -n "$PSNAME" ] ; then
		simet_log simet-ma daemon.notice "SIMET: MA owner: \"$PNAME\" ($PSNAME)"
	else
		simet_log simet-ma daemon.notice "SIMET: MA owner: \"$PNAME$PSNAME\""
	fi
}

__simet_pairing_recovery_apicall() {
	curl $CURLOPT \
		-A "$USERAGENT" -H "Authorization: Bearer $AT" \
		-H "Content-type: application/json" \
		-X POST -o "$OUTFILE" -w "%{http_code}" \
		--data-binary "{
			\"engine_name\":\"@SIMET_ENGINE_NAME@\",
			\"participant_id\":\"$1\", \"secret\":\"$2\"
		}" "$API_SIMET_AGENT_REG/v2/agent-recovery/$AID" \
	  || return 1
	:
}
__simet_attempt_pairing_recovery() {
	APIRES=$(__simet_pairing_recovery_apicall "$1" "$2") || return 1
	[ "$APIRES" -eq 200 ] || return 1
	:
}
#overridable
simet_attempt_pairing_recovery() {
	OLDPAIR=$(cat "$AGENT_PAIRBKP_FILE" 2>/dev/null) || return 1

	RMOLD=$(find "$AGENT_PAIRBKP_FILE" -maxdepth 0 -type f -mtime +14) || RMOLD=
	[ -n "$RMOLD" ] && rm -f "$AGENT_PAIRBKP_FILE"

	[ -z "$OLDPAIR" ] && return 1
	[ -z "$SIMET2_VLABEL" ] || [ "$SIMET2_VLABEL" != "FAILED" ] && return 1
	__simet_attempt_pairing_recovery "$OLDPAIR" "$SIMET2_VLABEL" || return 1
	SID2=$($JSONFILTER -i "$OUTFILE" -e "PAIRED=@.recovered") || return 1
	eval "$SID2" || return 1

	[ "$PAIRED" != "true" ] && [ "$PAIRED" != 1 ] && return 1

	rm -f "$AGENT_PAIRBKP_FILE"
	simet_log simet-ma daemon.notice "SIMET: pairing recovered"
	:
}

#overridable
simet_pairing_flow() {
	SIMET2_VLABEL=$(@BINDIR@/simet_read_vlabel.sh) || SIMET2_VLABEL="FAILED"
	[ "$SIMET2_VLABEL" = "DISABLED" ] && SIMET2_VLABEL=
	if [ -z "$SIMET2_VLABEL" ] ; then
		# register as not available for pairing
		call simet_register_vlabel || true
		rm -f "$AGENT_PAIRBKP_FILE"
		# We are no longer available for pairing, if we were in the
		# first place.  But we MIGHT be paired for whatever reason: we
		# did not request to remove an existing pairing above.
		#
		# PAIREDTO and PAIRED will be correctly set and up-to-date.
	elif [ "$SIMET2_VLABEL" != "FAILED" ] ; then
		if [ "$PAIRED" != "true" ] && [ "$PAIRED" != 1 ] ; then
			# It is normal for this to fail.
			call simet_attempt_pairing_recovery && {
				# but this shouldn't fail
				call simet_refresh_agent_status || \
					simet_log simet-ma daemon.warn "could not receive updated registration information, local information may be outdated."
			}
		fi

		# update the pairing secret in the AR, in case it could be
		# used to recover agent identity during a factory reset.
		call simet_register_vlabel || true
	fi

	call simet_update_participant_info || {
		simet_log simet-ma daemon.warn "SIMET: API error while requesting updated association information"
	}

	if [ "$PAIRED" = "true" ] || [ "$PAIRED" = 1 ] ; then
		simet_log simet-ma daemon.notice "SIMET: this MA is associated to a participant in the SIMET2 web portal"
		call simet_log_participant_info || :
		[ -n "$AGENT_PAIRBKP_FILE" ] && rm -f "$AGENT_PAIRBKP_FILE"
		[ -n "$AGENT_PAIR_FILE" ] && {
			OLDPAIR=
			[ -r "$AGENT_PAIR_FILE" ] && OLDPAIR=$(cat "$AGENT_PAIR_FILE")
			[ x"$OLDPAIR" != x"$PAIREDTO" ] && echo "$PAIREDTO" > "$AGENT_PAIR_FILE"
		}
		call_hook pairing_paired || \
			simet_log simet-ma daemon.warn "pairing_paired hook failed!"
	else
		rm -f "$AGENT_PAIR_FILE"
		call_hook pairing_unpaired || \
			simet_log simet-ma daemon.warn "pairing_paired hook failed!"
	fi
}

__invalidate_tokens() {
	VTK=
	call write_access_tokens || :
}
__consume_tokens_api_output() {
	VTK=
	SID=$($JSONFILTER -i "$OUTFILE" -e "VTK=@.access_tokens.view_results") \
		|| abend "unexpected or incorrect response from agent-registry service"
	eval "$SID" || abend "internal error"
	: > "$OUTFILE"

	call write_access_tokens "$1" "$VTK" || {
		simet_log simet-ma daemon.err "failed to store access tokens"
		return 1
	}
	:
}

#overridable
simet_update_tokens() {
	AGENT_ID="$1"
	AGENT_TOKEN="$2"
	APIRES=$( curl $CURLOPT -A "$USERAGENT" \
		  -H "Authorization: Bearer ${AGENT_TOKEN}" \
		  -X GET -o "$OUTFILE" -w "%{http_code}" \
		  "${API_SIMET_AGENT_REG}/v2/agents/${AGENT_ID}/access_tokens" ) || {
		SIMETMA_UPDATE_LASTEXEC=
		return 1
	}
	case "$APIRES" in
	200)
		__consume_tokens_api_output "$AGENT_ID" || return 1
		return 0
		;;
	304)
		# keep current tokens, if any
		return 0
		;;
	204)
		simet_log simet-ma daemon.err "SIMET2 agent registry doesn't know our agent-id!"
		__invalidate_tokens
		;;
	401|403)
		SIMETMA_UPDATE_LASTEXEC=1
		simet_log simet-ma daemon.err "SIMET2 agent autentication token invalid, or expired!"
		__invalidate_tokens
		;;
	410)
		simet_log simet-ma daemon.warn "SIMET2 agent registry requested removal of current access tokens"
		__invalidate_tokens
		;;
	5??|408)
		# server errors and timeouts
		SIMETMA_UPDATE_LASTEXEC=
		simet_log simet-ma daemon.err "SIMET2 agent registry service temporarily unavailable, status $APIRES"
		simet_log simet-ma daemon.err "SIMET: secondary access tokens could not be refreshed, and might not work"
		;;
	4??)
		# client software issue most likely. Must rate-limit.
		SIMETMA_UPDATE_LASTEXEC=1
		simet_log simet-ma daemon.err "SIMET2 server reports client error, status $APIRES"
		;;
	*)
		simet_log simet-ma daemon.warn "SIMET2 agent registry: server returned unexpected status $APIRES"
		;;
        esac
	return 1
}

#overridable
# return 0 if ID is foreign/cloned, NZ otherwise
# $1: 1 if vlabel OK, 0 if vlabel was foreign (and has been fixed)
simet_detect_cloned_id() {
	# for now, if it was foreign, reset id. SIMETBox can do
	# better (it overrides this), and so could x86 with
	# dmidecode and UUIDs.
	[ "$1" -eq 0 ] && \
		simet_log simet-ma daemon.warn "SIMET: virtual label flagged as foreign: assuming agent credentials came from other device"
	return "$1"
}

gettoken() {
	OLDAT=
	OLDAID=
	[ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
	[ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")
	AID=$OLDAID
	AT=$OLDAT

	[ -n "$SIMETMA_24HMODE" ] && {
		# Read last execution time from lockfile
		LASTEXEC=$( FOO=$(sed -n -e '1 { p; q; }' "$AGENT_TOKEN_LOCK" | tr -dc 0-9) && printf "%d\n" "$FOO" ) 2>/dev/null \
			|| LASTEXEC=-1

		# ensure lastrun timestamp is numeric non-negative, otherwise
		# reset it just in case we don't update it, and allow execution.
		[ "$LASTEXEC" -ge 0 ] 2>/dev/null || {
			LASTEXEC=0
			reset_lastrun
		}

		# should TIMEDELTA calculation fail for some reason, allow execution
		[ "$LASTEXEC" -gt 0 ] && TIMEDELTA=$(( $(date +%s -u) - LASTEXEC )) && {
			# reset timestamp if it is in the future, in case we don't
			# update it on this run.
			[ "$TIMEDELTA" -ge 0 ] || reset_lastrun

			# do nothing (return with status 0) if time delta is less than 24h
			# (and lastexec timestamp was *not* in the future)
			[ "$TIMEDELTA" -ge 0 ] && [ "$TIMEDELTA" -lt 86400 ] \
				&& return 0
		}
	}

	OUTFILE=$(mktemp -q -t simet-at-register.$$.XXXXXXXXXX) || abend "failed to create tmpfile"

	# don't leave behind tmpfiles
	trap 'run_trap' INT TERM QUIT

	VL_GOOD=1
	[ -e "$SIMET_RUNSTATE_DIR/vlabel-was-foreign" ] && VL_GOOD=0
	call simet_detect_cloned_id "$VL_GOOD" && __simet_invalidate_all "ma_foreign"

	call_hook before_reginfo || abend_ratelimit "before_reginfo hook failed"

	if [ -z "$OLDAT" ] || [ -z "$OLDAID" ] ; then
		call simet_create_agent || abend "could not register measurement agent"
	else
		call simet_refresh_agent_status || abend "request for updated measurement agent registration data failed"
	fi

	call_hook after_reginfo || abend_ratelimit "after_reginfo hook failed"

	if [ ! -r "$AGENT_ID_FILE" ] || [ -z "$AID" ] || [ ! -r "$AGENT_TOKEN_FILE" ] || [ -z "$AT" ] ; then
		call_hook failed_to_register || true
		abend "failed to register, please retry later"
	fi

	call simet_pairing_flow || abend_ratelimit "simet_pairing_flow() call failed, please retry later"

	call simet_update_agent_metadata || \
		simet_log simet-ma daemon.warn "registration metadata update either failed, or was rejected"

	if call simet_update_tokens "$AID" "$AT" ; then
		call_hook access_tokens_updated || true
	else
		simet_log simet-ma daemon.err "failed to retrieve access tokens"
	fi


	rm -f "$OUTFILE"
	OUTFILE=

	if [ x"$AID" != x"$OLDAID" ] || [ x"$AT"  != x"$OLDAT"  ] ; then
		simet_log simet-ma daemon.notice "agent-id or authorization token has changed"
		trap 'trap "" TERM ; call simet_restart_services || true' EXIT
		call_hook reginfo_changed || \
			simet_log simet-ma daemon.warn "reginfo_changed hook failed, MA or UI state may be incorrect/outdated"
	else
		call_hook reginfo_unchanged || \
			simet_log simet-ma daemon.warn "reginfo_unchanged hook failed"
	fi

	simet_log simet-ma daemon.info "SIMET: LMAP measurement agent id: $AID"

	update_lastrun || :
	:
}

# Refuse to run if we are already running
[ -r "$SIMETMA_REGMA_LOCK" ] || touch "$SIMETMA_REGMA_LOCK" || abend "cannot create $SIMETMA_REGMA_LOCK"
exec 7<"$SIMETMA_REGMA_LOCK"
flock -n -x 7 || {
	printf "%s: already running\n" "$0" >&2
	clean_exit
}

# Block some measurements by taking a shared lock on the agent lock
# If this fails, we don't care
[ -r "$AGENT_LOCK" ] || touch "$AGENT_LOCK" || abend "cannot create $AGENT_LOCK"
exec 8<"$AGENT_LOCK"
flock -n -s 8 || {
	simet_log simet-ma daemon.info "waiting up to 30s for the currently running measurement to complete..."
	flock_retry 30 -s 8 || simet_log simet-ma daemon.info "measurement still running, continuing anyway..."
}

# Acquire the agent token lock
[ -r "$AGENT_TOKEN_LOCK" ] || touch "$AGENT_TOKEN_LOCK" || abend "cannot create $AGENT_TOKEN_LOCK"
exec 9<"$AGENT_TOKEN_LOCK"
flock -n -x 9 || {
	simet_log simet-ma daemon.info "waiting up to 30s to acquire the agent registration lock"
	flock_retry 30 -x 9 || abend "failed to acquire the agent registration lock, giving up"
}

# shield the FDs using a subprocess where they're closed
( gettoken ) < /dev/null 7<&- 8<&- 9<&-
:
