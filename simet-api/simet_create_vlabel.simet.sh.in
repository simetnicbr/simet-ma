#!/bin/bash
## simet_create_vlabel.sh - creates and stores the SIMET2 virtual label
## Copyright (c) 2019 NIC.br
##
## If a virtual label is not present in the persistent storage, create one
## and return on stdout.
##
## Otherwise, return the existing virtual label on stdout.

# If we already have it, output it and exit
@BINDIR@/simet_read_vlabel.sh 2>/dev/null && exit 0

set -e
set -o pipefail

. @SIMETLIBDIR@/simet_lib.sh || exit 3

umask 0022

OUTFILE=
RC=1
abend() {
  [ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
  simet_log simet-ma daemon.err "$0: error: $*"
  exit "$RC"
}

[ -z "$AGENT_VLABEL_FILE" ] && RC=3 abend "MA does not know where to keep its virtual label"

#
# self-test the "tr" and "sha256sum" implementations for what we need/expect
#
#shellcheck disable=SC2015,SC2018,SC2019
ST=$(printf '\n037\n' | tr -d '\000-\037') && \
  SHA=$(printf "%s" "$ST" | sha256sum - | tr A-Z a-z | tr -dc 0-9a-z ) && \
  [ "$SHA" = "48a212a91e6da95f10d71b05c789efddfb0bad9814be07f6f7a343189fb630e7" ] || RC=2 abend "self-test failed"

# Load hooks and overrides
simet_load_hooks create_vlabel

#overridable
platform_generate_vlabel() {
  RC=1
  [ -x "@SIMETLIBDIR@/vendor/get_platform_simet_label" ] && {
    # attempt to retreive a real, printed label from FLASH
    RC=0
    IVS=$(@SIMETLIBDIR@/vendor/get_platform_simet_label vlabel) || RC=$?
    # temporary error, *MUST* retry later and not generate own label
    [ $RC -ge 2 ] && return 20
  }
  [ $RC -eq 0 ] && printf '%s' "$IVS"
  return $RC
}

# Needs a stable seed, and a message. we can use the MAC only in the presence of vendor/get_mac_label.
# if it is missing, we make do with sha of the stable seed.
simet_n0_vlabel() {
  [ -x @BINDIR@/simet_gen_vlabel ] || RC=2 abend "simet_gen_vlabel missing"
  PIV="$1"
  [ -n "$PIV" ] || RC=2 abend "internal error: missing data for simet_n0_vlabel"

  # fallback to *something* that is only random if the seed itself is also random
  PMAC="$PIV"
  [ -x @SIMETLIBDIR@/vendor/get_mac_label ] && {
    #shellcheck disable=SC2015
    PMAC=$(@SIMETLIBDIR@/vendor/get_mac_label) && [ -n "$PMAC" ] \
      || RC=2 abend "vendor/get_mac_label failed"
  }
  #shellcheck disable=SC2015,SC2018,SC2019
  PMAC=$(set -o pipefail; printf "%s" "$PMAC" | sha256sum - | tr A-Z a-z | tr -dc 0-9a-z)
  #shellcheck disable=SC2015
  [ -n "$PMAC" ] && [ "$PMAC" != "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ] \
    || RC=2 abend "internal error: empty PMAC"

  #shellcheck disable=SC2015,SC2086
  VL=$(printf "%s" "$PIV" | @BINDIR@/simet_gen_vlabel $GENVLABEL_OPT N0 "$PMAC") && [ -n "$VL" ] || RC=2 abend "simet_gen_vlabel N0 failed"

  printf "%s" "$VL"
  :
}

#overridable
platform_generate_secret() {
  [ -x "@SIMETLIBDIR@/vendor/get_platform_simet_secret" ] && \
    SBXSEED=$(@SIMETLIBDIR@/vendor/get_platform_simet_secret vlabel) || return 1
  if [ "$SBXSEED" = "DISABLED" ] || [ "$SBXSEED" = "disabled" ] ; then
    printf "DISABLED"
  elif [ -n "$SBXSEED" ] ; then
    simet_n0_vlabel "$SBXSEED" || return $?
  else
    return 1
  fi
  :
}

#overridable
platform_generate_random() {
  [ -x @BINDIR@/simet_gen_vlabel ] || RC=2 abend "simet_gen_vlabel missing"
  dd if=/dev/urandom bs=128 count=1 2>/dev/null | @BINDIR@/simet_gen_vlabel N0 "SIMET123456789ab" \
    || RC=2 abend "failed to read /dev/urandom or to simet_gen_vlabel"
  :
}

# caller-provided virtual label (normally not used)
[ -n "$SIMET2_VLABEL" ] && SIMET2_VLABEL="NIC0${SIMET2_VLABEL}"

call_hook before_platform

[ -z "$SIMET2_VLABEL" ] && {
  RRC=0
  SIMET2_VLABEL=$(call platform_generate_vlabel) || RRC=$?
  [ "$RRC" -eq 20 ] && RC=3 abend "cannot retrieve vlabel right now, please retry later"
  [ "$RRC" -eq 0 ] || SIMET2_VLABEL=
}
[ -z "$SIMET2_VLABEL" ] && {
  # may set to DISABLED
  SIMET2_VLABEL=$(call platform_generate_secret) || SIMET2_VLABEL=$(call platform_generate_random) || SIMET2_VLABEL=
}

call_hook after_platform

[ -z "$SIMET2_VLABEL" ] && RC=3 abend "MA could not create its virtual label"
printf "%s\n" "$SIMET2_VLABEL" > "$AGENT_VLABEL_FILE" \
  || RC=1 abend "Could not write virtual label to persistent storage"

if [ "$SIMET2_VLABEL" = "DISABLED" ] ; then
  ( call_hook vlabel_disabled ) </dev/null >/dev/null || :
else
  ( call_hook vlabel_created "$SIMET2_VLABEL" ) </dev/null >/dev/null || :
fi

# may print "DISABLED"
printf "%s\n" "$SIMET2_VLABEL"
:
