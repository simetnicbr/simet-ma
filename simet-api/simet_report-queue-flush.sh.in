#!/bin/bash
# Handle a lmapd compressed report queue (send/retry, cleanup)
# Copyright (c) 2020 NIC.br <medicoes@simet.nic.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  In every case, additional
# restrictions and permissions apply, refer to the COPYING file in the
# program Source for details.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License and the COPYING file in the program Source
# for details.

# Command line:
#   --fast:     do not wait for slow-to-respond LMAP collectors
#   --max-age:  clean up unsent reports older than max-age days
#               (done before --max-size is checked)
#   --max-size: clean up unsent reports until the queue is below
#               max-size kibibytes.
#
# list of URLs of collectors to use.  If none are given, the one
# from the hardcoded configuration will be used.
#
# Note: this script does *not* remove unsent reports when the amount
# of free resources is "large enough", regardless of --max-size/age.
# There are defaults and limits hardcoded that apply regardless of
# --max-age/size.

set -e
set -o pipefail

. @SIMETLIBDIR@/simet_lib.sh

abend() {
    simet_log simet-ma daemon.err "$*"
    exit 1
}

COLLECTORS=
CURLOPT=
MAX_SIZE=
MAX_AGE=
while [ $# -gt 0 ] ; do
    case "$1" in
	--fast)
	    # give up network operations faster
	    CURLOPT="--retry 3 --retry-max-time 30"
	    ;;
	--max-age)
	    shift
	    MAX_AGE="$1"
	    [ -n "$MAX_AGE" ] && [ "$MAX_AGE" -ge 1 ] 2>/dev/null \
		|| abend "--max-age <days>, days must be >= 1"
	    ;;
	--max-size)
	    shift
	    MAX_SIZE="$1"
	    [ -n "$MAX_SIZE" ] && [ "$MAX_SIZE" -ge 100 ] 2>/dev/null \
		|| abend "--max-size <size in KiB>, size must be >= 100 kibibytes"
	    ;;
	-*)
	    #abend "Unknown option $1"
	    ;;
	*)
	    COLLECTORS="$COLLECTORS $1"
	    ;;
    esac
    shift
done

if [ -z "$AGENT_ID_FILE" ] || [ -z "$AGENT_TOKEN_FILE" ] || [ -z "$LMAP_REPORT_QUEUE_DIR" ] ; then
    abend "missing configuration: AGENT_ID_FILE, AGENT_TOKEN_FILE or LMAP_REPORT_QUEUE_DIR"
fi

[ -z "$COLLECTORS" ] &&	COLLECTORS="$LMAP_COLLECTOR"
[ -z "$COLLECTORS" ] && abend "No LMAP collector specified"

# this is normal at power-up lmapd startup on embedded MAs: no log
[ -d "$LMAP_REPORT_QUEUE_DIR" ] || exit 0

# Fast exit should the queue be empty
# Note: some versions of OpenWRT "find" lack -quit
[ -z "$(find "$LMAP_REPORT_QUEUE_DIR" -type f -name '*.report.json.gz' -print | head -n1)" ] && exit 0

USERAGENT=$(get_http_useragent)

# parameters:
# $1 - report filename (must be a .gz file)
# $2.. - collectors
send_report_to_collector() {
    reportfn="$1"
    shift

    [ -s "$reportfn" ] || return 0

    malformed=0
    while [ $# -gt 0 ] ; do
	APIRES=$( gzip -cd "$reportfn" | curl $CURL_APIOPT $CURLOPT -A "$USERAGENT" \
		--data-binary @- -X POST \
		-o /dev/null -w "%{http_code}" \
		-H "Authorization: Bearer $OLDAT" \
		-H "Content-Type: application/yang.data+json" \
		"$1" ) || APIRES=

	case "$APIRES" in
	200)
		simet_log simet-ma daemon.info "LMAP report accepted by collector $1"
		rm -f "$reportfn"
		return 0
		;;
	400)
		malformed=1
		;;
	esac
	shift
    done
    if [ "$malformed" -eq 1 ] ; then
	simet_log simet-ma daemon.warn "LMAP report rejected by all collectors, discarding it"
	rm -f "$reportfn"
	return 0
    fi
    return 1
}

# discards older unsent reports
# what we have:
#   du -k -s <paths> will return disk use for each path
#   df -P -k <path> will return the percent full, free space, etc.
#   find <path> -mtime +# -type f -print0 | xargs -r -0
#
# beware shell disliking large numbers, use || when assuming error-because-too-large
# for embedded, we also try to track free memory, not portable.
# at least for $memfree, keep in mind it might be empty
enough_free_space() {
    tmpfs_mem_check=0
    memfree=
    df -T "$LMAP_REPORT_QUEUE_DIR" 2>/dev/null | grep -q tmpfs && {
        memfree=$(grep -s -i "^MemFree:" /proc/meminfo 2>/dev/null | sed -nE -e '{s/.*:[ \t]*//;s/[ \t]+[kK].*//;p;q}') \
	    && [ "$memfree" -ge 1 ] 2>/dev/null && tmpfs_mem_check=1
    }

    # using tmpfs, and free RAM too low: do remove
    [ "$tmpfs_mem_check" -eq 1 ] && [ "$memfree" -le 2048 ] && return 1

    # we depend on -o pipefail here
    duo=$(du -k -s "$LMAP_REPORT_QUEUE_DIR" 2>/dev/null | sed -n -E '/^[0-9]/ {s/(^[0-9]+).*/\1/;p;q}') \
       && [ "$duo" -ge 0 ] 2>/dev/null || duo=
    dfo=$(df -k -P "$LMAP_REPORT_QUEUE_DIR" 2>/dev/null | sed -n -E '/[0-9]%/ {s/[ \t]+/ /g;s/%//g;p;q}') || dfo=

    [ -n "$duo" ] && {
	# don't remove anything if we're using less than 100KiB (or on overflow)
	[ "$duo" -ge 100 ] || return 0
	# Free RAM low, and we'd help a lot by removing unsent reports: do remove
	[ "$tmpfs_mem_check" -eq 1 ] && [ "$memfree" -le 10240 ] && [ "$duo" -ge 1024 ] && return 1
    }

    df_free=$(printf '%s' "$dfo" | cut -d ' ' -f 4) || df_free=
    [ -n "$df_free" ] && {
	# don't remove anything if we have more than 100MiB free
	[ "$df_free" -lt 102400 ] || return 0
	# if we're under 1MiB free, *do* remove
	[ "$df_free" -lt 1024 ] && return 1
    }

    #df_userel=$(printf '%s' "$dfo" | cut -d ' ' -f 5) || df_userel=
    #df_used=$(printf '%s' "$dfo" | cut -d ' ' -f 3) || df_used=

    [ -n "$duo" ] && [ -n "$MAX_SIZE" ] && {
	# don't remove if we'd free too little
	[ -n "$df_free" ] && {
	    [ "$df_free" -lt $((duo * 10)) ] || return 0
	}
	[ "$duo" -lt "$MAX_SIZE" ] || return 1
    }
    #[ "$duo" -le 10240 ] && [ "$df_userel" -le 95 ] && return 0

    return 0
}
discard_older() {
    enough_free_space "$LMAP_REPORT_QUEUE_DIR" && return
    [ -n "$MAX_AGE" ] && [ "$MAX_AGE" -ge 1 ] && {
	find "$LMAP_REPORT_QUEUE_DIR" -type f -name '*.report.json*' -mtime "+$((MAX_AGE - 1))" -print | while read -r fn ; do
	    [ -f "$fn" ] && rm -f "$fn" && simet_log simet-ma daemon.warn "removed unsent report $fn due to old age, report lost"
        done
        enough_free_space "$LMAP_REPORT_QUEUE_DIR" && return
    }
    find "$LMAP_REPORT_QUEUE_DIR" -type f -name '*.report.json*' -print | sort | while read -r fn ; do
	[ -f "$fn" ] && rm -f "$fn" && simet_log simet-ma daemon.warn "removed unsent report $fn to free space, report lost"
	enough_free_space "$LMAP_REPORT_QUEUE_DIR" && return
    done
    :
}

simet_reportqueue_runqueue() {
    OLDAT=
    OLDAID=
    [ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
    [ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")

    # We *require* an agent-id and agent token to submit reports
    if [ -z "$OLDAT" ] || [ -z "$OLDAID" ] || [ ! -r "$LMAP_AGENT_FILE" ] ; then
	abend "MA not registered yet, cannot submit reports"
    fi

    # beware the stripped-down busybox "find" in OpenWRT!

    find "$LMAP_REPORT_QUEUE_DIR" -type f -name '*.report.json.gz' -print | sort | while read -r fn ; do
	if [ -s "$fn" ] && gzip -t "$fn" >/dev/null 2>&1 ; then
	    send_report_to_collector "$fn" $COLLECTORS || :
	else
	    [ -s "$fn" ] && simet_log simet-ma daemon.warn "queued report '$fn' corrupt, discarding it..."
	    [ -n "$fn" ] && rm -f "$fn"
	fi
    done

    # remove stale data such as maybe-incomplete uncompressed reports
    find "$LMAP_REPORT_QUEUE_DIR" -type f -mtime +0 ! -name '*.report.json.gz' ! -name '*.lock' -print0 | xargs -0 -r rm -f

    discard_older

    waiting=$(find "$LMAP_REPORT_QUEUE_DIR" -type f -name '*.report.json.gz' -print 2>/dev/null | wc -l) || waiting=0
    [ "$waiting" -gt 0 ] && {
	simet_log simet-ma daemon.notice "$waiting report(s) still waiting for delivery"
    }
}

cd "$LMAP_REPORT_QUEUE_DIR" || abend "cannot change to LMAP_REPORT_QUEUE_DIR"
{ flock -n -x 9 && simet_reportqueue_runqueue ; } </dev/null 9>"$LMAP_REPORT_QUEUE_DIR/.report-flush.lock" || :
:
