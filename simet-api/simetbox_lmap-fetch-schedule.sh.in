#!/bin/sh
# Downloads the SIMETBOX SIMET MA lmapd schedule
# Copyright (c) 2019 NIC.br <medicoes@simet.nic.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  In every case, additional
# restrictions and permissions apply, refer to the COPYING file in the
# program Source for details.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License and the COPYING file in the program Source
# for details.

# parameters:
#   --boot   (optional) shorten wait times and not restart the service

. @SIMETLIBDIR@/simet_lib.sh || exit 3
. @SIMETLIBDIR@/simet_lib_lmapd.sh || exit 3

SIMETMA_LMAPSCHED_LOCK="${SIMET_LOCK_DIR}/simet_lmap_schedule.lock"

OUTFILE=
abend() {
	simet_log simet-lmapd daemon.err "$*"
	[ -n "$OUTFILE" ] && rm -f "$OUTFILE" 2>/dev/null
	exit 1
}
run_trap() {
	abend "$0: received stop/interrupt signal"
}

# if this is missing, the MA will have *no* hardcoded schedule
LMAP_DFLSCHED_TMPL=@SIMETLIBDIR@/lmap-sched-template.json

LMAP_SCHEDULE_FILE=$(lmapd_get_sched_filename main) \
	|| abend "internal error: cannot obtain main schedule name"

# OpenWRT 21+ is very broken and requires root to even *run* initscripts,
# so just bypass it entirely.
LMAP_RECONFIG=${LMAP_RECONFIG:-lmapd_lmapctl_reload main}

USERAGENT=$(get_http_useragent)
CURLOPT="$CURL_APIOPT --max-filesize 1000000"
CURLOPT2=

HASHSUM=$(command -v sha256sum) || HASHSUM=$(command -v md5sum) \
	|| RC=3 abend "neither md5sum nor sha256sum found!"

case "$1" in
	--boot)
		shift
		CURLOPT2="--retry 3 --retry-max-time 30"
		LMAP_RECONFIG=
	;;
esac

# $1: max; $2 base_mult; $3 period; $4 offset
__gen_seq() {
	local value_max="$1" value_units="$2"
	local value_step="$3" value_offset="$4"
	local s b

	[ -z "$value_step" ] && value_step=1
	[ -z "$value_offset" ] && value_offset=0

	[ "$value_step" -eq 0 ] && return 1
	[ "$value_step" -le "$value_units" ] && {
		printf '"*"'
		return 0
	}
	[ $((value_step % value_units)) -ne 0 ] && return 1

	s=$(((value_step / value_units) % value_max))
	b=$(((value_offset / value_units) % value_max))

	if [ "$s" -eq 1 ] ; then
		res="\"*\""
	elif [ "$s" -eq 0 ] ; then
		res="$b"
	else
		[ $((value_max % s)) -ne 0 ] && return 2
		res=
		b=$((b % s))
		while [ "$b" -lt "$value_max" ] ; do
			[ -n "$res" ] && res="$res,"
			res="$res$b"
			b=$((b+s))
		done
	fi
	printf '%s' "$res"
	:
}

# $1 period (min); $2 spread (s)
__clamp_spread() {
	local res="$2" tbase="$(($1*60))" s="$2"

	if [ "$tbase" -le "$((5*s))" ] ; then
		res=$((tbase / 5)) || res=300
		[ $res -gt 300 ] && res=300
		[ $res -lt 5 ] && res=0
	fi
	printf '%d' "$res" || printf "0"
	:
}

#overridable
#clobbers $OUTFILE contents!
simet_gen_local_schedule() {
	local awkseed RND RND1 RND2
	local engineconf

	# stable-per-device pseudo-random sequence for awk, fallback to time-based seed
	awkseed=$(printf '%s' "$SIMET_MAC_LABEL" | sed -E -e '1 {s/.*(.{5})$/0x\1/;q}') || awkseed=
	RND=$(awk "BEGIN { srand($awkseed); printf \"RND1=%d ; RND2=%d\",rand()*1440,rand()*1440 }") && eval "$RND"

	# Last resort config and/or defaults
	T_PERIODIC_TEST_SPREAD="${SIMET_PERIODIC_TEST_SPREAD_SECONDS:-300}"
	T_PERIODIC_GWP_SPREAD="${SIMET_PERIODIC_GWPING_SPREAD_SECONDS:-300}"
	T_PERIODIC_SPOOFER_SPREAD="${SIMET_PERIODIC_SPOOFER_SPREAD_SECONDS:-300}"

	engineconf=$(ubus call simet_ma simet_engine_status) || engineconf="{}"
	T_PERIODIC_TEST_PERIOD=$(jsonfilter -s "$engineconf" -e '@.local_measurement_config.basic.period_minutes' || uci -q get simet_ma.basic.time_step) \
		|| T_PERIODIC_TEST_PERIOD="${SIMET_PERIODIC_TEST_PERIOD_MINUTES:-240}"
	T_PERIODIC_GWP_PERIOD=$(jsonfilter -s "$engineconf" -e '@.local_measurement_config.gw_ping.period_minutes' || uci -q get simet_ma.gw_ping.time_step) \
		|| T_PERIODIC_GWP_PERIOD="${SIMET_PERIODIC_GWPING_PERIOD_MINUTES:-60}"
	T_PERIODIC_SPOOFER_PERIOD=$(jsonfilter -s "$engineconf" -e '@.local_measurement_config.spoofer.period_minutes' || uci -q get simet_ma.spoofer.time_step) \
		|| T_PERIODIC_SPOOFER_PERIOD="${SIMET_PERIODIC_SPOOFER_PERIOD_MINUTES:-720}"

	T_PERIODIC_GWP_PERIOD_S=$((T_PERIODIC_GWP_PERIOD * 60))
	T_PERIODIC_TEST_PERIOD_S=$((T_PERIODIC_TEST_PERIOD * 60))
	T_PERIODIC_SPOOFER_PERIOD_S=$((T_PERIODIC_SPOOFER_PERIOD * 60))

	T_PERIODIC_TEST_SPREAD=$(__clamp_spread "$T_PERIODIC_TEST_PERIOD" "$T_PERIODIC_TEST_SPREAD")
	T_PERIODIC_GWP_SPREAD=$(__clamp_spread "$T_PERIODIC_GWP_PERIOD" "$T_PERIODIC_GWP_SPREAD")
	T_PERIODIC_SPOOFER_SPREAD=$(__clamp_spread "$T_PERIODIC_SPOOFER_PERIOD" "$T_PERIODIC_SPOOFER_SPREAD")

	T_PERIODIC_GWP_HOURS=$(__gen_seq 24 60 "$T_PERIODIC_GWP_PERIOD" "$RND2") \
	  && T_PERIODIC_GWP_MINUTES=$(__gen_seq 60 1 "$T_PERIODIC_GWP_PERIOD" "$RND2") \
	  || { T_PERIODIC_GWP_HOURS='"*"' ; T_PERIODIC_GWP_MINUTES=0 ; }
	T_PERIODIC_TEST_HOURS=$(__gen_seq 24 60 "$T_PERIODIC_TEST_PERIOD" "$RND1") \
	  && T_PERIODIC_TEST_MINUTES=$(__gen_seq 60 1 "$T_PERIODIC_TEST_PERIOD" "$RND1") \
	  || { T_PERIODIC_TEST_HOURS="1,5,9,13,17,21" ; T_PERIODIC_TEST_MINUTES=39 ; }
	T_PERIODIC_SPOOFER_HOURS=$(__gen_seq 24 60 "$T_PERIODIC_SPOOFER_PERIOD" "$RND1") \
	  && T_PERIODIC_SPOOFER_MINUTES=$(__gen_seq 60 1 "$T_PERIODIC_SPOOFER_PERIOD" "$RND1") \
	  || { T_PERIODIC_SPOOFER_HOURS="3,15" ; T_PERIODIC_SPOOFER_MINUTES=23 ; }

	sed -e "s/@PERIODIC_GWP_HOURS@/$T_PERIODIC_GWP_HOURS/g" \
	    -e "s/@PERIODIC_GWP_MINUTES@/$T_PERIODIC_GWP_MINUTES/g" \
	    -e "s/@PERIODIC_GWP_SPREAD@/$T_PERIODIC_GWP_SPREAD/g" \
	    -e "s/@PERIODIC_GWP_PERIOD@/$T_PERIODIC_GWP_PERIOD_S/g" \
	    -e "s/@PERIODIC_TEST_HOURS@/$T_PERIODIC_TEST_HOURS/g" \
	    -e "s/@PERIODIC_TEST_MINUTES@/$T_PERIODIC_TEST_MINUTES/g" \
	    -e "s/@PERIODIC_TEST_SPREAD@/$T_PERIODIC_TEST_SPREAD/g" \
	    -e "s/@PERIODIC_TEST_PERIOD@/$T_PERIODIC_TEST_PERIOD_S/g" \
	    -e "s/@PERIODIC_SPOOFER_HOURS@/$T_PERIODIC_SPOOFER_HOURS/g" \
	    -e "s/@PERIODIC_SPOOFER_MINUTES@/$T_PERIODIC_SPOOFER_MINUTES/g" \
	    -e "s/@PERIODIC_SPOOFER_SPREAD@/$T_PERIODIC_SPOOFER_SPREAD/g" \
	    -e "s/@PERIODIC_SPOOFER_PERIOD@/$T_PERIODIC_SPOOFER_PERIOD_S/g" \
		"$LMAP_DFLSCHED_TMPL" > "$OUTFILE" || return 1
	:
}

simet_api_lmapputstate() {
	curl $CURLOPT $CURLOPT2 -A "$USERAGENT" \
		-T - -f -o "$OUTFILE" \
		-H "Authorization: Bearer $OLDAT" \
		"${LMAP_CHANNEL_URL}/v1/agents/$OLDAID/reported-state"
}

simet_lmap_sendstate() {
	lmapd_lmapd_state main | simet_api_lmapputstate || return $?
	:
}

# FIXME add etag support
# APIRES = 204 -> revert to default schedule
# APIRES = 304 -> keep current schedule (may happen even without e-tags)
simet_api_lmapgetsched() {
	APIRES=$( curl $CURLOPT $CURLOPT2 -A "$USERAGENT" \
		-X GET -o "$OUTFILE" -w "%{http_code}" \
		-H "Authorization: Bearer $OLDAT" \
		"${LMAP_CHANNEL_URL}/v1/agents/$OLDAID/required-config" ) || return 1
	:
}

#note: symlinks *must* have absolute paths as target
simet_lmap_download_schedule() {
	simet_lmap_sendstate || true
	simet_api_lmapgetsched || return $?
	case "$APIRES" in
	200)
		simet_log simet-ma daemon.info "downloaded a proposed schedule from controller"
		return 0
		;;
	204)
		simet_log simet-ma daemon.notice "controller ordered us to switch to local schedule"
		simet_gen_local_schedule || return 1
		;;
	304)
		ln -sf "$LMAP_SCHEDULE_FILE" "$OUTFILE"
		;;
	4*|5*)
		return 1
		;;
	esac
	simet_log simet-ma daemon.warn "unexpected result from controller API"
	return 1
}

simet_lmap_reload_config() {
	if [ -n "$LMAP_RECONFIG" ] ; then
		$LMAP_RECONFIG || true
	fi
}

gethash() {
	# $1 - file to hash
	[ -r "$1" ] || {
		echo ""
		return 0
	}
	$HASHSUM "$1" | sed -n '1 { s/[[:blank:]].*// ; p ; q }' || :
	return 0
}

simet_lmap_verifyconfig() {
	lmapd_lmapctl_validate "$1" || return $?
	return 0
}

activateschedule() {
	force_reload=0
	[ "$1" -eq 1 ] && force_reload=1
	NEWSCHED_HASH=$(gethash "$OUTFILE")
	if [ x"$NEWSCHED_HASH" != x"$OLDSCHED_HASH" ] ; then
		simet_lmap_verifyconfig "$OUTFILE" || {
			simet_log simet-lmapd daemon.err "proposed new SIMET schedule is invalid"
			return 1
		}

		[ -L "$OUTFILE" ] || {
			chmod 0664 "$OUTFILE" || return 1
		}
		mv -f "$OUTFILE" "$LMAP_SCHEDULE_FILE" || return 1
		force_reload=1
		simet_log simet-ma daemon.notice "SIMET schedule has changed"
	else
		simet_log simet-ma daemon.info "SIMET schedule unchanged"
	fi
	[ $force_reload -eq 1 ] && {
		trap 'trap "" TERM ; simet_lmap_reload_config || true' EXIT
	}
	:
}

getschedule() {
	# Controller access API requirements:
	#   First, PUT your current state so that controller knows it
	#   Then,  GET your schedule (if PUT failed, you may get one based on ancient state)
	#   Then,  PUT your new state, so that controller knows the schedule took

	OLDAT=
	OLDAID=
	[ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
	[ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")

	# We *require* an agent-id and agent token to get a schedule
	if [ -z "$OLDAT" ] || [ -z "$OLDAID" ] || [ ! -r "$LMAP_AGENT_FILE" ] ; then
		abend "MA not registered yet, cannot contact controller"
	fi

	# Avoid massive problems on broken config
	if [ -z "$LMAP_SCHEDULE_FILE" ] || [ -z "$LMAP_CHANNEL_URL" ] ; then
		abend "missing essential data in simet-ma.conf, aborting"
	fi

	# might race something, so tolerate failures
	# whatever cares (such as simet-ma/simet-lmapd init scripts) will fix
	# the onwership of LMAP_SCHEDULE_DIR as required.
	LMAP_SCHEDULE_DIR=$(dirname "$LMAP_SCHEDULE_FILE")
	[ -d "$LMAP_SCHEDULE_DIR" ] || \
		mkdir -p "$LMAP_SCHEDULE_DIR" 2>/dev/null || true

	OUTFILE=$(mktemp -q -t simet-lmap-fetchsched.$$.XXXXXXXXXX) \
		|| abend "failed to create tmpfile"

	# don't leave behind tmpfiles
	trap 'run_trap' INT TERM QUIT

	LMAPD_NEED_RELOAD=0
	# Create a local schedule if there isn't any schedule yet.  We send it to
	# the LMAP controller as "current".
	if [ ! -s "$LMAP_SCHEDULE_FILE" ] || grep -q -s -F "ma-local_emergency-schedule" "$LMAP_SCHEDULE_FILE" ; then
		simet_gen_local_schedule && {
			# must displace target, either mv-f or rm-f+cp/cat>
			chmod 0664 "$OUTFILE" \
			  && mv -f "$OUTFILE" "$LMAP_SCHEDULE_FILE" \
			  && LMAPD_NEED_RELOAD=1 \
			  && simet_log simet-ma daemon.info "SIMET local schedule created"
			OUTFILE=
		}
	fi

	[ -z "$OUTFILE" ] && {
		OUTFILE=$(mktemp -q -t simet-lmap-fetchsched.$$.XXXXXXXXXX) \
		  || abend "failed to create tmpfile"
	}

	OLDSCHED_HASH=
	[ -r "$LMAP_SCHEDULE_FILE" ] && OLDSCHED_HASH=$(gethash "$LMAP_SCHEDULE_FILE")

	#shellcheck disable=SC2015
	simet_lmap_download_schedule && activateschedule "$LMAPD_NEED_RELOAD" || {
		simet_log simet-ma daemon.err "failed to download or activate schedule from controller"
		grep -q -s -F '"ma-local_locally-generated-schedule"' "$LMAP_SCHEDULE_FILE" && {
			if simet_gen_local_schedule && activateschedule "$LMAPD_NEED_RELOAD" ; then
				simet_log simet-ma daemon.notice "using local schedule"
			else
				simet_log simet-ma daemon.err "failed to update or activate local schedule"
			fi
		}
	}

	# always try to send state after downloading a schedule
	simet_lmap_sendstate \
		|| simet_log simet-ma daemon.notice "failed to send state update to controller"

	[ -n "$OUTFILE" ] && rm -f "$OUTFILE"
	OUTFILE=
}

# Refuse to run if we are already running
[ -r "$SIMETMA_LMAPSCHED_LOCK" ] || touch "$SIMETMA_LMAPSCHED_LOCK" || abend "cannot create $SIMETMA_LMAPSCHED_LOCK"
exec 8<"$SIMETMA_LMAPSCHED_LOCK"
flock -n -x 8 || {
       printf "%s: already running\n" "$0" >&2
       clean_exit
}

# Acquire the agent token lock
[ -r "$AGENT_TOKEN_LOCK" ] || touch "$AGENT_TOKEN_LOCK" || abend "cannot create $AGENT_TOKEN_LOCK"
exec 9<"$AGENT_TOKEN_LOCK"
flock -n -x 9 || {
	simet_log simet-ma daemon.info "waiting up to 30s to acquire the agent registration lock"
	flock_retry 30 -x 9 || abend "failed to acquire the agent registration lock, giving up"
}

# shield the FDs using a subprocess where they're closed
( getschedule ) < /dev/null 8<&- 9<&-
:
