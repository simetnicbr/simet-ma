#!/bin/bash

# Spoofer-like test using nping and traceroute
# Copyright (c) 2019 NIC.br <medicoes@simet.nic.br>

# Requires simet-nping, either suid root or cap_net_raw+ep
# Requires either Busybox or the Linux modern traceroute (*not* inetutils-traceroute).
# Requires "ip route get"

set -e
set -o pipefail

. @SIMETLIBDIR@/simet_lib.sh || exit 3

OUTDIR=
RC=1
abend() {
  [ -n "$OUTDIR" ] && [ -d "$OUTDIR" ] && rm -fr "$OUTDIR" 2>/dev/null
  simet_log simet-ma daemon.err "simet-spoofer: error: $*"
  exit "$RC"
}
soft_abend() {
  [ -n "$OUTDIR" ] && [ -d "$OUTDIR" ] && rm -fr "$OUTDIR" 2>/dev/null
  [ -n "$FAIL_SILENTLY" ] && exit 0
  simet_log simet-ma daemon.err "simet-spoofer: error: $*"
  exit "$RC"
}
run_trap() {
	# 128 + SIGTERM(15)
	RC=143 soft_abend "$0: received stop/interrupt signal"
}

command -v simet-nping >/dev/null || RC=3 abend "simet-nping not found on PATH"
TRACEROUTE=$(command -v traceroute.db || command -v traceroute) || RC=3 abend "traceroute not found on PATH"

# bcp38 server control is from simet-as right now
API_SIMET_SPOOFER="${API_SIMET_SPOOFER:-https://api.simetas.nic.br/probelist}"

# We *require* an agent-id and agent token to get an API key
OLDAT=
OLDAID=
[ -r "$AGENT_ID_FILE" ] && OLDAID=$(cat "$AGENT_ID_FILE")
[ -r "$AGENT_TOKEN_FILE" ] && OLDAT=$(cat "$AGENT_TOKEN_FILE")
if [ -z "$OLDAT" ] || [ -z "$OLDAID" ] ; then
  RC=20 abend "MA not registered yet"
fi

USERAGENT=$(get_http_useragent)
CURLOPT="$CURL_APIOPT --max-filesize 4000"

FAIL_SILENTLY=
RC=1

KEY=

TARGETXOR=1
TARGETS=
TFDIST=10
TRDIST=30
SYNCMODE=@SMALLMEMORY@

usage() {
  echo "$0 [--help][-h] [--single-threaded | --multi-threaded] [--fail-silently] [--key <key>] [--tracefilter-same-source] [--tracefilter-distance <distance>] [<target>...]" >&2
  exit 0
}

#
# Handle command line
#
while [ $# -gt 0 ] ; do
  case "$1" in
    --help|-h)
      usage
      ;;
    --fail-silently)
      FAIL_SILENTLY=1
      ;;
    --key)
      shift
      KEY="$1"
      ;;
    --tracefilter-same-source)
      TARGETXOR=0
      ;;
    --tracefilter-distance)
      shift
      TFDIST="$1"
      [ "$TFDIST" -gt 0 ] || RC=2 abend "--tracefilter distance must be a number higher than zero"
      [ "$TFDIST" -gt "$TRDIST" ] && TRDIST="$TFDIST"
      ;;
    --single-threaded)
      SYNCMODE=1
      ;;
    --multi-threaded)
      SYNCMODE=0
      ;;
    --*)
      RC=2 abend "Unknown command line option $1"
      ;;
    *)
      TARGETS="$TARGETS $1"
      ;;
  esac
  shift
done

OUTDIR=$(mktemp -q -t -d simet-spoofer.$$.XXXXXXXXXX) \
  || abend "could not create work directory"
[ -d "$OUTDIR" ] || RC=3 abend "weirdness while creating work directory"

# do not leave behind tmpfiles
trap 'run_trap' INT TERM QUIT

# FIXME: fetch a key for each target?
get_spoof_server_key() {
  LSK=$(curl $CURLOPT -A "$USERAGENT" \
       -X GET -f -H "Authorization: Bearer $OLDAT" \
       "${API_SIMET_SPOOFER}/v1/bcp38token?agent_id=$OLDAID") \
     || return 1
  [ -z "$LSK" ] && return 1
  printf '%s' "$LSK"
  :
}
get_spoof_targets() {
  LTG=$(curl $CURLOPT -A "$USERAGENT" \
       -X GET -f -H "Authorization: Bearer $OLDAT" \
       "${API_SIMET_SPOOFER}/v1/bcp38targets?agent_id=$OLDAID") \
     || return 1
  [ -z "$LTG" ] && return 1
  printf '%s' "$LTG"
  :
}

output_json() {
  cat <<- EOFJH1
	{
		"function":[{"uri":"urn:ietf:metrics:perf:Priv_MPMonitor_Active_UDP-ICMP_BCP38_Multiple_Raw"}],
		"column":["test_id","subtest_id","source","destination","raw_output","exit_status"],
		"row":[
EOFJH1
  sed -e '$ s/},$/}]}/' "$OUTDIR"/*.json || abend "failed to render json output"
}

start_test() {
  TESTID="$1"
  shift
  echo "TEST: $TESTID: $*" >&2
}
start_subtest() {
  local OUTFILE

  SUBTESTNAME="$1"
  SUBTESTID="$2"
  SUBTESTNUM="$3"
  shift 3 || RC=3 abend "missing tags in subtest"
  echo "SUBTEST: $SUBTESTNAME $SUBTESTID $SUBTESTNUM: $*" >&2
  OUTFILE=$(mktemp -q -t -p "$OUTDIR" simet-spoofer."$TESTID"."$SUBTESTNAME"."$SUBTESTNUM".XXXXXXXXXX) \
    || abend "could not create temporary output file $OUTFILE"
  echo "$OUTFILE"
}
end_subtest() {
  local OUTFILE R

  SUBTESTNAME="$1"
  SUBTESTID="$2"
  SUBTESTNUM="$3"
  shift 3 || RC=3 abend "missing tags in subtest"
  SUBTEST1="$1"
  SUBTEST2="$2"
  OUTFILE="$3"
  R="$4"
  [ "$R" -ge 0 ] || RC=3 abend "not a valid return status"
  [ -r "$OUTFILE" ] || RC=3 abend "no tool output file to process"
  {
    echo "{\"value\":[\"$TESTID\",\"$SUBTESTID\",\"$SUBTEST1\",\"$SUBTEST2\","
    if [ -s "$OUTFILE" ] ; then
      sed -e 's/[\]/\\\\/g' -e 's/"/\\"/g' -e 's/\t/\\t/g' -e 's/$/\\n/' \
          -e '1 s/^/"/' -e '$ s/$/",/' -e 's/[[:cntrl:]]*//g' "$OUTFILE" | tr -d '\n\r'
    else
      echo '"",'
    fi
    echo "\"$R\"]},"
  } > "$OUTFILE.json" || abend "failed to write json subtest output"
  rm "$OUTFILE" || true
  echo "ENDSUBTEST: $SUBTESTNAME $SUBTESTID $SUBTESTNUM" >&2
}
end_test() {
  echo "ENDTEST: $TESTID" >&2
}

fail_all() {
  echo "TESTFAIL: $TESTID" >&2
  RC=11 soft_abend "could not perform spoofer measurement"
}


straceroute() (
  # busybox traceroute doesn't accept -N1
  exec "$TRACEROUTE" -I -w1 -q3 "-m$TRDIST" "$@"
)

snping() (
  RS=$(date +%s 2>/dev/null) || RS=$$
  RS=$((RS % 65536 + $$))
  exec simet-nping --echo-client "$KEY" --data-len 32 --udp -g $((RS % 15000 + 40000)) --dest-port $((RS % 100 + 33434)) "$@"
)

xor_lsb() {
  # Invert the least significant bit of an IPv4 or IPv6 address
  # IPv6 regex can be quite loose because ':' is forbidden in hostnames
  sed -E -e 's/^[[:blank:]]+// ; s/[[:blank:]]\+$//' \
      -e '/^((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])$|^[0-9a-fA-F:]*:[0-9a-fA-F:.]+$/ {
             h;s/.$//;x;
             s/(.*)(.)$/\2/;y/0123456789abcdefABCDEF/1032547698badcfeBADCFE/;H;
             x;s/\n//
          }'
}

findsrc() {
  [ -n "$1" ] && {
    ip route get "$1" | sed -n -e '/[[:blank:]]src[[:blank:]]/ { s#.*[[:blank:]]src[[:blank:]]\+\([^[:blank:]]\+\).*#\1# ; p ; q }' || true
  }
  :
}

condwait() {
  if [ $SYNCMODE -ne 0 ] ; then
    wait || return $?
  else
    sleep 1
  fi
  :
}

# Returns selection of sources for spoofing and subtest id
# $1 - destination
get_spoofed_sources() {
  echo 192.168.34.99 private
  echo 10.233.211.199 private
  echo 172.31.23.11 private
  echo 200.160.2.3 public_other-as
  #echo "$1" target_ip
  echo "$( echo "$1" | xor_lsb | tr -d '\n' )" target_ip
}

probe_targets() {
  local ONESUCCESS OUTFILE N i
  local kind

  kind="$1"
  ONESUCCESS=
  start_test "probe_targets" "send non-spoofed packets"
  N=0
  for i in $TARGETS ; do
    N=$((N+1))
    OUTFILE=$(start_subtest probe_targets "$kind" $N "send to $i")
    R=0
    S=$(findsrc "$i")
    snping -c5 "$i" >"$OUTFILE" && ONESUCCESS=1 || R=$?
    end_subtest probe_targets "$kind" $N "$S" "$i" "$OUTFILE" "$R"
  done
  [ -z "$ONESUCCESS" ] && fail_all
  end_test
}

spoof_targets() {
  local OUTFILE N i

  start_test spoof_packets "send spoofed packets"
  N=0
  for i in $TARGETS ; do get_spoofed_sources "$i" | while read -r j j_id ; do
    N=$((N+1))
    (
      OUTFILE=$(start_subtest spoof_packets "$j_id" $N "send spoofed from $j to $i")
      R=0
      snping -c5 -S "$j" "$i" >"$OUTFILE" || R=$?
      end_subtest spoof_packets "$j_id" $N "$j" "$i" "$OUTFILE" "$R"
    )& condwait
  done ; done
  wait
  end_test
}

# We don't tracefilter in parallel, to avoid possible
# issues with ICMP generation rate limits and to get some
# time-separation window between them.
tracefilter_targets() {
  local OUTFILE N sip dip dist i

  start_test tracefilter "modified nping-based tracefilter to targets"
  dist="$1"
  [ -z "$dist" ] && dist=10
  N=0
  for sip in $TARGETS ; do
    dip="$sip"
    [ $TARGETXOR -ne 0 ] && dip=$(echo "$sip" | xor_lsb)

    for i in 1 2 3 ; do
      N=$((N+1))
      (
        OUTFILE=$(start_subtest tracefilter "$dist" $N "nping traceroute from $sip to $dip, dist=$dist")
        R=0
        snping -c$dist -tr --delay 5s -S "$sip" "$dip" >"$OUTFILE" || R=$?
        end_subtest tracefilter "$dist" $N "$sip" "$dip" "$OUTFILE" "$R"
      )
      sleep 5
    done
  done
  wait
  end_test
}

traceroute_targets() {
  local OUTFILE N i kind

  kind="$1"
  start_test "traceroute" "standard traceroute to targets"
  N=0
  for i in $TARGETS ; do
    N=$((N+1))
    (
      OUTFILE=$(start_subtest traceroute "$kind" $N "target $i")
      R=0
      S=$(findsrc "$i")
      straceroute "$i" >"$OUTFILE" || R=$?
      end_subtest traceroute "$kind" $N "$S" "$i" "$OUTFILE" "$R"
    )& condwait
  done
  wait
  end_test
}

[ -z "$TARGETS" ] && {
  TARGETS=$(get_spoof_targets) || TARGETS=
}
[ -z "$TARGETS" ] && RC=22 abend "no targets (bcp38 measurement peers) to measure with"

[ -z "$KEY" ] && {
  KEY=$(get_spoof_server_key) || KEY=
}
[ -z "$KEY" ] && RC=22 abend "an access key is required to run this measurement"

probe_targets before
traceroute_targets before
spoof_targets
tracefilter_targets "$TFDIST"
traceroute_targets after
probe_targets after

output_json

[ -n "$OUTDIR" ] && [ -d "$OUTDIR" ] && rm -fr "$OUTDIR" 2>/dev/null
:
