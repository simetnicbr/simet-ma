#!/lib/init/init-d-script
# simet-lmapd.init - Debian sysv-rc initscript for simet-lmapd
# Copyright (c) 2019 NIC.br
#
# Distributed under the GPLv3+ license with additional terms and permissions
# Refer to the COPYING file on the program source for details
#
### BEGIN INIT INFO
# Required-Start:    $local_fs $remote_fs $time simet-ma
# Required-Stop:     $local_fs $remote_fs $time simet-ma
# Provides:          simet-lmapd
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: SIMET-MA LMAP scheduler
# Description:       SIMET Management Agent LMAP task scheduler
### END INIT INFO

DAEMON=/opt/simet/bin/lmapd
COMMAND_NAME=lmapd
NAME="lmapd"
DESC="SIMET Measurement Agent LMAP scheduler"
SUSER=nicbr-simet
SGROUP=$SUSER

PIDFILENAME="lmapd.pid"

START_ARGS="-u $SUSER -c $SUSER --background"
STOP_ARGS="-u $SUSER --retry 10"
DAEMON_ARGS="-j"

#for safety
LMAP_INSTANCE_LIST=main

do_prepare_common() {
	# SIMET_CFG_LOAD_ERROR is also internally set in simet_lib_config.sh
	SIMET_CFG_LOAD_ERROR=
	. /opt/simet/lib/simet/simet_lib_config.sh || SIMET_CFG_LOAD_ERROR=1
	if [ -n "$SIMET_CFG_LOAD_ERROR" ] ; then
		echo "$0: syntax errors in the configuration files, aborting..." >&2
		return 1
	fi
	. /opt/simet/lib/simet/simet_lib_lmapd.sh || {
		echo "$0: failed to load simet_lib_lmapd.sh, aborting..." >&2
		return 1
	}
	#shellcheck disable=SC2015
	LMAP_INSTANCE_LIST=$(lmapd_get_instance_list) && [ -n "$LMAP_INSTANCE_LIST" ] || {
		echo "$0: simet_lib_lmapd.sh::lmapd_get_instance_list failed, aborting..." >&2
		return 1
	}
}

x_paranoid_mkdir_02770() {
	#shellcheck disable=SC2015
	[ -n "$1" ] && mkdir -p -m 0700 "$1" && [ -d "$1" ] || {
		printf "%s: failed to create directory %s" "$0" "$1" >&2
		return 1
	}
	chgrp "$SGROUP" "$1" && chmod 02770 "$1"
	:
}

x_force_group_files() {
	#shellcheck disable=SC2015
	[ -n "$1" ] && [ -d "$1" ] || {
		printf "%s: not a directory: %s" "$0" "$1" >&2
		return 1
	}
	find "$1" -type f ! \( -user "$SUSER" -a -group "$SGROUP" \) -exec chown "$SUSER:$SGROUP" '{}' +
	find "$1" -type f ! -perm -g+r -exec chmod g+r '{}' +
	:
}

# not called on default init-d-script do_restart/reload
do_start_prepare() {
	do_prepare_common || exit 2

	if [ -z "$LMAP_QUEUE_DIR_PREFIX" ] || [ -z "$LMAP_RUN_DIR_PREFIX" ] \
	   || [ -z "$LMAP_AGENT_FILE" ] || [ -z "$LMAP_SPOOL_DIR" ] ; then
		echo "$0: required configuration missing, aborting..." >&2
		exit 2
	fi

	for i in $LMAP_INSTANCE_LIST ; do
		x_paranoid_mkdir_02770 "$(lmapd_get_rundir "$i")" || exit 2
	done
	find "$LMAP_RUN_DIR_PREFIX" -maxdepth 1 -type d ! -group "$SGROUP" -exec chgrp "$SGROUP" '{}' +
	find "$LMAP_RUN_DIR_PREFIX" -maxdepth 1 -type d ! -perm 02770 -exec chmod 02770 '{}' +

	# don't mess with not-files, like symlinks. chown must run before chmod.
	# recurses into per-instance RUNDIRs as well
	find "$LMAP_RUN_DIR_PREFIX" -type f -name "*.json" -exec chown "$SUSER:$SGROUP" '{}' +
	find "$LMAP_RUN_DIR_PREFIX" -type f -name "*.json" -exec chmod ug+rw,o= '{}' +

	# setup the emergency schedule (main lmapd instance) and empty schedules
	# (other instances) when there is no schedule.  Ensure correct permissions as well.
	# This might race a schedule download, so we don't want to clobber the
	# downloaded schedule with a ln -sf or writing to the file.
	#shellcheck disable=SC2015
	MAINSCHEDULE=$(lmapd_get_sched_filename main) && [ -n "$MAINSCHEDULE" ] || {
		echo "$0: simet_lib_lmapd.sh::lmapd_get_sched_filename failed, aborting..." >&2
		exit 2
	}
	[ -e "$MAINSCHEDULE" ] || \
		ln -s /opt/simet/lib/simet/lmap-emergency-schedule.json "$MAINSCHEDULE" 2>/dev/null || true
	chown -h "$SUSER:$SGROUP" "$MAINSCHEDULE" 2>/dev/null || true

	for i in $LMAP_EXTRA_INSTANCES ; do
		#shellcheck disable=SC2015
		SCHEDULE=$(lmapd_get_sched_filename "$i") && [ -n "$SCHEDULE" ] || {
			echo "$0: simet_lib_lmapd.sh::lmapd_get_sched_filename failed, aborting..." >&2
			exit 2
		}
		[ -e "$SCHEDULE" ] || \
			ln -s /opt/simet/lib/simet/lmap-empty-schedule.json "$SCHEDULE" 2>/dev/null || true
		chown -h "$SUSER:$SGROUP" "$SCHEDULE" 2>/dev/null || true
	done

	x_paranoid_mkdir_02770 "$LMAP_SPOOL_DIR" || exit 2
	x_force_group_files    "$LMAP_SPOOL_DIR" || exit 2

	x_paranoid_mkdir_02770 "$LMAP_REPORT_QUEUE_DIR" || exit 2
	x_force_group_files    "$LMAP_REPORT_QUEUE_DIR" || exit 2

	for i in $LMAP_INSTANCE_LIST ; do
		x_paranoid_mkdir_02770 "$(lmapd_get_queuedir "$i")" || exit 2
		x_force_group_files    "$(lmapd_get_queuedir "$i")" || exit 2
	done

	start-stop-daemon -c "$SUSER" --start --name simet_reg_ma --startas /opt/simet/bin/simet_register_ma.sh -- --boot || true
	[ -r "$LMAP_AGENT_FILE" ] || {
		log_warning_msg "LMAP agent-id is not configured yet"
		exit 0
	}

	# contact controller at daemon start/boot, or try to generate a local schedule.
	start-stop-daemon -c "$SUSER" --start --name simetgetsched --startas /opt/simet/bin/simet_lmap-fetch-schedule.sh -- --boot || true

	# try to geolocate (as root)
	/opt/simet/bin/simet_geolocation.sh >/dev/null 2>&1 &
	:
}

# start-stop-daemon --exec requires CAP_SYS_ADMIN, no good inside a container

# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start_instance() {
	[ -n "$LMAP_RUN_DIR_PREFIX" ] && [ -n "$PIDFILENAME" ] || return 2

	QDIR=$(lmapd_get_queuedir "$1") && [ -d "$QDIR" ] || return 1
	RDIR=$(lmapd_get_rundir "$1") && [ -d "$RDIR" ] || return 1
	SCHEDULE=$(lmapd_get_sched_filename "$1") && [ -n "$SCHEDULE" ] || return 1

	PIDFILE="$RDIR/$PIDFILENAME"

	#shellcheck disable=SC2086
	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name $NAME --test > /dev/null \
	  || return 1
	#shellcheck disable=SC2086
	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name $NAME -- $DAEMON_ARGS \
	    -q "$QDIR" -r "$RDIR" -c+ -c "$SCHEDULE" \
	  || return 2
	:
}
do_start_cmd_override() {
	[ -z "$LMAP_INSTANCE_LIST" ] && return 2

	for i in $LMAP_INSTANCE_LIST ; do
		do_start_instance "$i" || return $?
	done
	:
}

do_reload() {
	do_prepare_common || return 1

	RETVAL=0
	for i in $LMAP_INSTANCE_LIST ; do
		log_action_begin_msg "Validating $DESC configuration, instance $i"
		if lmapd_lmapctl_validate "$(lmapd_get_sched_filename)" >/dev/null 2>&1 ; then
			log_action_end_msg 0
			log_daemon_msg "Reloading $DESC configuration files" "$NAME-$i"
			ARETVAL=0
			lmapd_lmapctl_reload "$i" || ARETVAL=$?
			log_end_msg "$ARETVAL"
			[ $ARETVAL -ne 0 ] && RETVAL="$ARETVAL"
		else
			log_action_end_msg 1 "not reloading"
			RETVAL=1
		fi
	done
	return $RETVAL
}

do_stop_cmd_override() {
	# hunt down any lmapd running as our user, and signal it
	#shellcheck disable=SC2086
	start-stop-daemon --stop --quiet --name $NAME $STOP_ARGS
}

do_status_override() {
	do_prepare_common || return 3

	RETVAL=0
	for i in $LMAP_INSTANCE_LIST ; do
		log_action_begin_msg "Checking $NAME instance $i"

		if lmapd_lmapctl_running "$i" >/dev/null ; then
			log_action_end_msg 0
		else
			log_action_end_msg 3
			RETVAL=3
		fi
	done
	if [ $RETVAL -eq 0 ] ; then
		log_success_msg "$DESC is running"
	else
		log_failure_msg "$DESC is not running"
	fi
	return $RETVAL
}

