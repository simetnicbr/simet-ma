#!/lib/init/init-d-script
# simet-ma.init - Debian sysv-rc initscript for the SIMET2 Measurement Agent
# Copyright (c) 2018,2019 NIC.br
#
# Distributed under the GPLv3+ license with additional terms and permissions
# Refer to the COPYING file on the program source for details
#
### BEGIN INIT INFO
# Required-Start:    $local_fs $remote_fs $time
# Required-Stop:     $local_fs $remote_fs $time
# Provides:          simet-ma
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: SIMET-MA inetupd daemon and boot services
# Description:       Re(register) at boot the SIMET Managagement Agent
#                    and start the inetupd measurement (internet uptime)
### END INIT INFO

DAEMON=/opt/simet/bin/inetupc
NAME="inetupc"
COMMAND_NAME="inetupc"
DESC="SIMET Measurement Agent"
SUSER=nicbr-simet
SGROUP=$SUSER

PIDFILE=/var/run/simet-inetupc.pid

START_ARGS="-u $SUSER -c $SUSER --background --make-pidfile"

# SIMET_CFG_LOAD_ERROR is also internally set in simet_lib_config.sh
SIMET_CFG_LOAD_ERROR=
. /opt/simet/lib/simet/simet_lib_config.sh || SIMET_CFG_LOAD_ERROR=1
if [ -n "$SIMET_CFG_LOAD_ERROR" ] ; then
	echo "$0: syntax errors in the configuration files, aborting..." >&2
	exit 1
fi
if [ -z "$AGENT_ID_FILE" ] || [ -z "$AGENT_TOKEN_FILE" ] || \
   [ -z "$GEOLOC_CACHE" ] || [ -z "$SIMET_INETUP_SERVER" ] ; then
	echo "$0: required configuration missing, aborting..." >&2
	exit 1
fi
BOOTID=$(cat /proc/sys/kernel/random/boot_id) || true

DAEMON_ARGS="-M ${LMAP_TASK_NAME_PREFIX}inetconn-state -b $BOOTID"
[ -n "$AGENT_TOKEN_FILE" ] && DAEMON_ARGS="$DAEMON_ARGS -j $AGENT_TOKEN_FILE"
[ -n "$AGENT_ID_FILE" ] && DAEMON_ARGS="$DAEMON_ARGS -d $AGENT_ID_FILE"
DAEMON_ARGS="$DAEMON_ARGS $SIMET_INETUP_SERVER"

# Argh!
fix_traceroute() {
    command -v setcap >/dev/null 2>&1 && {
	TR=$(command -v traceroute.db) || TR=$(command -v traceroute) || return 0
	REALTR=$(readlink -e "$TR") || return 0
	setcap -q -v cap_net_raw+ep "$REALTR" || {
	    echo "$0: WARNING: giving $REALTR CAP_NET_RAW capabilities for non-root ICMP tracerouting" >&2
	    setcap -q cap_net_raw+ep "$REALTR" || echo "$0: failed to change $REALTR capabilities" >&2
        }
    }
    :
}

# We *really* need bigger buffers for high-BDP, and unfortunately
# due to several issues in many versions of the Linux kernels, it
# has to already start big.  And we need some tricks because /bin/sh
# "read" cannot reliably cope with /proc
do_update_proc_triplet() (
	F="$1"
	P1="$2"
	P2="$3"
	P3="$4"
	P=$(cat "$F") || P=
	OIFS="$IFS"
	IFS="$(printf ' \t\n')" set -- $P
	IFS="$OIFS"
	O="$1 $2 $3"
	[ "$P1" -lt "$1" ] 2>/dev/null && P1="$1"
	[ "$P2" -lt "$2" ] 2>/dev/null && P2="$2"
	[ "$P3" -lt "$3" ] 2>/dev/null && P3="$3"
	[ "$P1 $P2 $P3" != "$O" ] || return 0
	printf "%d %d %d\n" "$P1" "$P2" "$P3" > "$F" || return 1
	:
)
fix_tcp() {
	do_update_proc_triplet /proc/sys/net/ipv4/tcp_rmem 4096 1048576 16777216 && \
	do_update_proc_triplet /proc/sys/net/ipv4/tcp_wmem 4096 1048576 16777216 || {
		logger -t simet-ma -p daemon.warning "SIMET-MA: failed to increase socket buffer size limits, bandwidth measurements might be too low" >/dev/null 2>&1 || true
	}
	:
}

# not called by default init-d-script reload/restart
do_start_prepare() {
	# used for the geolocation cache and ephemeral tokens
	[ -n "$SIMET_RUNSTATE_DIR" ] && \
		mkdir -m 0770 -p "$SIMET_RUNSTATE_DIR" && \
		chgrp -R "$SGROUP" "$SIMET_RUNSTATE_DIR" && \
		chmod 2770 "$SIMET_RUNSTATE_DIR" && \
		find "$SIMET_RUNSTATE_DIR" -type f ! -perm 0660 -exec chmod 0660 '{}' +
	[ -n "$SIMET_VARSTATE_DIR" ] && \
		mkdir -m 0770 -p "$SIMET_VARSTATE_DIR" && \
		chgrp -R "$SGROUP" "$SIMET_VARSTATE_DIR" && \
		chmod 2770 "$SIMET_VARSTATE_DIR" && \
		find "$SIMET_VARSTATE_DIR" -type f ! -perm 0660 -exec chmod 0660 '{}' +
	[ -n "$SIMET_CACHE_DIR" ] && [ "$SIMET_CACHE_DIR" != "$SIMET_VARSTATE_DIR" ] && \
		mkdir -m 0770 -p "$SIMET_CACHE_DIR" && \
		chgrp -R "$SGROUP" "$SIMET_CACHE_DIR" && \
		chmod 2770 "$SIMET_CACHE_DIR" && \
		find "$SIMET_CACHE_DIR" -type f ! -perm 0660 -exec chmod 0660 '{}' +
	[ -n "$SIMET_PUBRUNSTATE_DIR" ] && \
		mkdir -m 0770 -p "$SIMET_PUBRUNSTATE_DIR" && \
		chgrp -R "$SGROUP" "$SIMET_PUBRUNSTATE_DIR" && \
		chmod 2775 "$SIMET_PUBRUNSTATE_DIR" && \
		find "$SIMET_PUBRUNSTATE_DIR" -type f ! -perm 0664 -exec chmod 0664 '{}' +

	# locks and pidfiles
	[ -n "$SIMET_LOCK_DIR" ] && \
		mkdir -m 0770 -p "$SIMET_LOCK_DIR" && \
		chgrp -R "$SGROUP" "$SIMET_LOCK_DIR" && \
		chmod 2770 "$SIMET_LOCK_DIR" && \
		find "$SIMET_LOCK_DIR" -type f ! -perm 0660 -exec chmod 0660 '{}' +

	# Registration information (heal permissions)
	for i in "$AGENT_ID_FILE" "$AGENT_TOKEN_FILE" "$LMAP_AGENT_FILE" ; do
		[ -n "$i" ] && {
			find "$i" -type f ! -perm -0660 -exec chmod ug+rw,o-w '{}' \; 2>/dev/null || true
			d=$(dirname "$i") && [ -d "$d" ] && \
				find "$d" -type d -maxdepth 0 ! -perm -0770 -exec chmod ug+rwx,o= '{}' \; 2>/dev/null || true
		}
	done
	for i in "$AGENT_VIEW_CREDENTIALS_FILE" ; do
		[ -n "$i" ] && {
			find "$i" -type f ! -perm 0664 -exec chmod 0664 '{}' \; 2>/dev/null || true
			d=$(dirname "$i") && [ -d "$d" ] && \
				find "$d" -type d -maxdepth 0 ! -perm -0775 -exec chmod ug+rwx,o+rx-w '{}' \; 2>/dev/null || true
		}
	done

	# Create virtual label if one does not exist.  If you want to
	# disable it, use an empty file or one containing DISABLED
	log_action_begin_msg "Verifying SIMET pairing label"
	RC=0
	VLABEL=$(/opt/simet/bin/simet_create_vlabel.sh) || RC=$?
	if [ "$RC" -eq 0 ] ; then
		log_action_end_msg 0 "$VLABEL"
		logger -t simet-ma -p daemon.notice "SIMET-MA: agent virtual label is: $VLABEL" >/dev/null 2>&1 || true
	else
		log_action_end_msg "$RC" "unavailable"
	fi

	log_action_msg "Attempting SIMET-MA registration with the SIMET backend"
	# --name doesn't matter, as long as it doesn't match, and not too long
	start-stop-daemon -c "$SUSER" --start --name simet_reg_ma --startas /opt/simet/bin/simet_register_ma.sh -- --boot || true
	:
}

do_reload() {
	fix_tcp
	invoke-rc.d simet-lmapd reload || true

	log_daemon_msg "Reloading $DESC agent-id and credentials" "$NAME"
	start-stop-daemon --stop --quiet --oknodo --signal HUP \
		$STOP_ARGS --pidfile "${PIDFILE}" --name "${COMMAND_NAME}"
	log_end_msg $?
}

# start-stop-daemon --exec requires CAP_SYS_ADMIN, no good inside a container.
do_stop_cmd_override() {
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
	    $STOP_ARGS --pidfile "${PIDFILE}" --name "${COMMAND_NAME}" \
	|| return $?
}
# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start_cmd_override() {
	fix_traceroute
	fix_tcp

	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name "${COMMAND_NAME}" --test > /dev/null \
	  || return 1

	# fail early the most common reasons for inetup to refuse to start
	[ ! -s "$AGENT_ID_FILE" ] || [ ! -s "$AGENT_TOKEN_FILE" ] \
	  && return 2

	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name "${COMMAND_NAME}" -- $DAEMON_ARGS \
	  || return 2

	# detect most cases of early exit.  Wait 1s for start-stop-daemon
	# implementations that could return too early.  Needed because we
	# use start-stop-daemon --background
	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name "${COMMAND_NAME}" --test > /dev/null \
	  || return 0
	sleep 1
	start-stop-daemon --start --quiet --pidfile "${PIDFILE}" \
	    $START_ARGS \
	    --startas $DAEMON --name "${COMMAND_NAME}" --test > /dev/null \
	  || return 0
	return 2
}

# init-d-script do_status() is broken when PIDFILE is set due to a bug
# status_of_proc() requires CAP_SYS_ADMIN (due to the use of pidof -c)
# should any issues with the pidfile happen (incorrect pid inside).
do_status_override() {
	status_of_proc -p "${PIDFILE}" "$DAEMON" "$NAME" || return $?
}
